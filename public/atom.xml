<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小熊猫的花园</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jane66.com/"/>
  <updated>2019-01-09T05:51:45.753Z</updated>
  <id>https://jane66.com/</id>
  
  <author>
    <name>Jiao Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的第一个证书</title>
    <link href="https://jane66.com/2019/01/08/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AF%81%E4%B9%A6/"/>
    <id>https://jane66.com/2019/01/08/我的第一个证书/</id>
    <published>2019-01-08T05:44:49.000Z</published>
    <updated>2019-01-09T05:51:45.753Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallary/IMG_0033.jpg" alt=""></p><p>今天潜水 🏊‍♀️ 成功，获得的人生第一个证书 😄。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/gallary/IMG_0033.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天潜水 🏊‍♀️ 成功，获得的人生第一个证书 😄。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>又吃辅食了啦😊</title>
    <link href="https://jane66.com/2019/01/06/%E5%8F%88%E5%90%83%E8%BE%85%E9%A3%9F%E4%BA%86%E5%95%A6%F0%9F%98%8A/"/>
    <id>https://jane66.com/2019/01/06/又吃辅食了啦😊/</id>
    <published>2019-01-06T05:24:35.000Z</published>
    <updated>2019-01-09T05:29:55.919Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallary/IMG_0028.jpg" alt=""></p><p>今天吃胡萝卜 🥕+ 米粉 🍚，连续吃了 10 多天胡萝卜后终于不抗拒了，做个不挑食的乖宝宝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/gallary/IMG_0028.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天吃胡萝卜 🥕+ 米粉 🍚，连续吃了 10 多天胡萝卜后终于不抗拒了，做个不挑食的乖宝宝。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>努力努力</title>
    <link href="https://jane66.com/2019/01/02/%E5%8A%AA%E5%8A%9B%E5%8A%AA%E5%8A%9B/"/>
    <id>https://jane66.com/2019/01/02/努力努力/</id>
    <published>2019-01-02T10:07:45.000Z</published>
    <updated>2019-01-08T10:09:00.848Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallary/IMG_0024.jpg" alt=""></p><p>努力学习，快快成长 💪。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/gallary/IMG_0024.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;努力学习，快快成长 💪。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>减肥</title>
    <link href="https://jane66.com/2018/11/08/%E5%87%8F%E8%82%A5/"/>
    <id>https://jane66.com/2018/11/08/减肥/</id>
    <published>2018-11-08T09:36:39.000Z</published>
    <updated>2019-01-08T09:53:41.285Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallary/IMG_0003.jpg" alt=""></p><p>13 斤的肥猫了 🐱，是时候减肥了！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/gallary/IMG_0003.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;13 斤的肥猫了 🐱，是时候减肥了！！！&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="招财" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E6%8B%9B%E8%B4%A2/"/>
    
    
      <category term="招财" scheme="https://jane66.com/tags/%E6%8B%9B%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>招财捣蛋日常</title>
    <link href="https://jane66.com/2018/11/08/%E6%8B%9B%E8%B4%A2%E6%8D%A3%E8%9B%8B%E6%97%A5%E5%B8%B8/"/>
    <id>https://jane66.com/2018/11/08/招财捣蛋日常/</id>
    <published>2018-11-08T09:15:09.000Z</published>
    <updated>2019-01-08T09:32:16.301Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/gallary/IMG_0001.jpg" alt=""></p><p>招财蔑视、千翻儿、抢妹妹的床睡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/gallary/IMG_0001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;招财蔑视、千翻儿、抢妹妹的床睡。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="招财" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E6%8B%9B%E8%B4%A2/"/>
    
    
      <category term="招财" scheme="https://jane66.com/tags/%E6%8B%9B%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>开荤</title>
    <link href="https://jane66.com/2018/10/01/%E5%BC%80%E8%8D%A4/"/>
    <id>https://jane66.com/2018/10/01/开荤/</id>
    <published>2018-10-01T09:44:41.000Z</published>
    <updated>2019-01-08T10:01:25.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallary/IMG_0023.jpg" alt=""></p><p>今天是祖国生日，小熊猫也过节，开荤了 😛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/gallary/IMG_0023.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天是祖国生日，小熊猫也过节，开荤了 😛。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>百天party</title>
    <link href="https://jane66.com/2018/09/21/%E7%99%BE%E5%A4%A9party/"/>
    <id>https://jane66.com/2018/09/21/百天party/</id>
    <published>2018-09-21T09:52:15.000Z</published>
    <updated>2019-01-09T01:32:56.180Z</updated>
    
    <content type="html"><![CDATA[<p>今天小熊猫和哥哥、姐姐、弟弟、妹妹一起 party go 😄：</p><a id="more"></a><iframe scrolling="no" width="100%" height="100%" onload="iFrameHeight()" src="/gallary/v001.mp4" frameborder="0" allowfullscreen><br></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天小熊猫和哥哥、姐姐、弟弟、妹妹一起 party go 😄：&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序中绘制雷达图</title>
    <link href="https://jane66.com/2018/08/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%BB%98%E5%88%B6%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    <id>https://jane66.com/2018/08/29/微信小程序中绘制雷达图/</id>
    <published>2018-08-29T01:50:00.000Z</published>
    <updated>2019-01-08T05:32:48.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雷达图（Radar Chart），又可称为戴布拉图、蜘蛛网图（Spider Chart），是财务分析报表的一种。使用者能一目了然的了解各项指标的变动情形及其好坏趋向。<br>本文介绍如何在微信小程序中实现雷达图绘制。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/2641798-4cb2f61add473cd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雷达图"></p><h2 id="绘制背景"><a href="#绘制背景" class="headerlink" title="绘制背景"></a>绘制背景</h2><p>首先我们需要绘制出雷达图后面的“蜘蛛网”。具体原理就是一层一层将多边形画出来，根据数据长度决定每一个点的位置和半径长度。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var angle = Math.PI * 2 / length;</span><br><span class="line">for (var layer = 5; layer &gt; 0; layer--) &#123;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.setGlobalAlpha(1);</span><br><span class="line">        context.setStrokeStyle(&quot;#D3D3D3&quot;);</span><br><span class="line">        if (layer % 2 != 0) &#123;</span><br><span class="line">          context.setFillStyle(&quot;white&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          context.setFillStyle(&quot;#F5F5F5&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        var currentRad = layer / 5 * radius;</span><br><span class="line">        context.moveTo(center.x, center.y - currentRad);</span><br><span class="line">        var currentAngle = -Math.PI / 2;</span><br><span class="line">        for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">          context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle));</span><br><span class="line">          currentAngle += angle;</span><br><span class="line">        &#125;</span><br><span class="line">        context.fill();</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>如代码所示，<code>angle</code>是根据数据长度决定的，这里为了好看，一共画五层，并且交替涂抹颜色。下图是<code>length=6</code>的效果：<br><img src="https://upload-images.jianshu.io/upload_images/2641798-482cb08a73db4b5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蜘蛛网"></p><h2 id="绘制轴"><a href="#绘制轴" class="headerlink" title="绘制轴"></a>绘制轴</h2><p>接下来就是将各个顶点与圆心连接起来。有了“蜘蛛网”的经验，画轴就简单多了，只需要知道最外层顶点位置然后<code>lineTo</code>圆心就行了。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// draw Axis</span><br><span class="line">context.beginPath();</span><br><span class="line">var currentAngle = -Math.PI / 2;</span><br><span class="line">for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">  context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle));</span><br><span class="line">  context.lineTo(center.x, center.y);</span><br><span class="line">  currentAngle += angle;</span><br><span class="line">&#125;</span><br><span class="line">context.closePath();</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>以下是加上轴线后的效果：<br><img src="https://upload-images.jianshu.io/upload_images/2641798-fd3a8dd75cc634c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数轴"></p><h2 id="绘制指标"><a href="#绘制指标" class="headerlink" title="绘制指标"></a>绘制指标</h2><p>接下来是将各个维度指标名字添加到图表上。同数轴一样，首先需要确定最外层顶点的位置，然后根据位置调整文字显示的基准，将文字写上去。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// draw Index</span><br><span class="line">context.beginPath();</span><br><span class="line">context.setFillStyle(&quot;#D3D3D3&quot;);</span><br><span class="line">context.setFontSize(14);</span><br><span class="line">var currentAngle = -Math.PI / 2;</span><br><span class="line">for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">  var posX = center.x + radius * Math.cos(currentAngle);</span><br><span class="line">  var posY = center.y + radius * Math.sin(currentAngle);</span><br><span class="line">  if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;);</span><br><span class="line">  else context.setTextAlign(&quot;left&quot;);</span><br><span class="line">  if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;);</span><br><span class="line">  else context.setTextBaseline(&quot;bottom&quot;);</span><br><span class="line">  context.fillText(that.options.xLabel[i], posX, posY);</span><br><span class="line">  currentAngle += angle;</span><br><span class="line">&#125;</span><br><span class="line">context.closePath();</span><br></pre></td></tr></table></figure><p>这里为了好看，对于文字要显示的位置小于中心点 x 坐标的靠右对齐，否则靠左对齐；对于文字位置大于中心点 y 坐标的基准设置在上方，否则在下方。以下是加上指标后的效果：<br><img src="https://upload-images.jianshu.io/upload_images/2641798-896f6d32eda04d07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指标"></p><h2 id="绘制数据"><a href="#绘制数据" class="headerlink" title="绘制数据"></a>绘制数据</h2><p>最后，我们将数据绘制到图表上。首先，我们要确定所有数据的最大值，如果最大值大于 10，那么取 10 的倍数。然后同画“蜘蛛网”一样，将各个数据点的半径根据相对于最大值比例换算出来，然后绘制在图表上。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// draw data</span><br><span class="line">var MaxValue = Math.max.apply(null, that.options.data[0].value);</span><br><span class="line">that.options.data.forEach(function(val) &#123;</span><br><span class="line">  var temp = Math.max.apply(null, val.value);</span><br><span class="line">  if (temp &gt; MaxValue) MaxValue = temp;</span><br><span class="line">&#125;);</span><br><span class="line">if (MaxValue &gt; 10) &#123;</span><br><span class="line">  MaxValue = Math.ceil(MaxValue / 10) * 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">that.options.data.forEach(function(val) &#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.setStrokeStyle(val.color);</span><br><span class="line">  var currentRad = radius * val.value[0] / MaxValue * step / MaxStep;</span><br><span class="line">  context.moveTo(center.x, center.y - currentRad);</span><br><span class="line">  var currentAngle = -Math.PI / 2;</span><br><span class="line">  for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">    currentRad = radius * val.value[i] / MaxValue * step / MaxStep;</span><br><span class="line">    context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle));</span><br><span class="line">    currentAngle += angle;</span><br><span class="line">  &#125;</span><br><span class="line">  currentRad = radius * val.value[0] / MaxValue * step / MaxStep;</span><br><span class="line">  context.lineTo(center.x, center.y - currentRad);</span><br><span class="line">  context.stroke();</span><br><span class="line">  if (that.options.area) &#123;</span><br><span class="line">    context.setFillStyle(val.color);</span><br><span class="line">    context.setGlobalAlpha(0.5);</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">  context.closePath();</span><br><span class="line">&#125;);</span><br><span class="line">context.draw();</span><br></pre></td></tr></table></figure><p>以下就是添加数据后的完整效果：<br><img src="https://upload-images.jianshu.io/upload_images/2641798-cb22523fbd815021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据"></p><h2 id="添加绘制动画"><a href="#添加绘制动画" class="headerlink" title="添加绘制动画"></a>添加绘制动画</h2><p>为了显示效果更佳，我们可以给绘制图表加上动画，具体实现如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">var angle = Math.PI * 2 / length;</span><br><span class="line"></span><br><span class="line">var step = 1;</span><br><span class="line">var MaxStep = that.options.animation ? 50 : 1;</span><br><span class="line">var animation = function() &#123;</span><br><span class="line">  if (step &lt;= MaxStep) &#123;</span><br><span class="line">    // draw background</span><br><span class="line">    for (var layer = 5; layer &gt; 0; layer--) &#123;</span><br><span class="line">      context.beginPath();</span><br><span class="line">      context.setGlobalAlpha(1);</span><br><span class="line">      context.setStrokeStyle(&quot;#D3D3D3&quot;);</span><br><span class="line">      if (layer % 2 != 0) &#123;</span><br><span class="line">        context.setFillStyle(&quot;white&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        context.setFillStyle(&quot;#F5F5F5&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      var currentRad = layer / 5 * radius;</span><br><span class="line">      context.moveTo(center.x, center.y - currentRad);</span><br><span class="line">      var currentAngle = -Math.PI / 2;</span><br><span class="line">      for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">        context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle));</span><br><span class="line">        currentAngle += angle;</span><br><span class="line">      &#125;</span><br><span class="line">      context.fill();</span><br><span class="line">      context.closePath();</span><br><span class="line">      context.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // draw Axis</span><br><span class="line">    context.beginPath();</span><br><span class="line">    var currentAngle = -Math.PI / 2;</span><br><span class="line">    for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">      context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle));</span><br><span class="line">      context.lineTo(center.x, center.y);</span><br><span class="line">      currentAngle += angle;</span><br><span class="line">    &#125;</span><br><span class="line">    context.closePath();</span><br><span class="line">    context.stroke();</span><br><span class="line"></span><br><span class="line">    // draw Index</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.setFillStyle(&quot;#D3D3D3&quot;);</span><br><span class="line">    context.setFontSize(14);</span><br><span class="line">    var currentAngle = -Math.PI / 2;</span><br><span class="line">    for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">      var posX = center.x + radius * Math.cos(currentAngle);</span><br><span class="line">      var posY = center.y + radius * Math.sin(currentAngle);</span><br><span class="line">      if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;);</span><br><span class="line">      else context.setTextAlign(&quot;left&quot;);</span><br><span class="line">      if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;);</span><br><span class="line">      else context.setTextBaseline(&quot;bottom&quot;);</span><br><span class="line">      context.fillText(that.options.xLabel[i], posX, posY);</span><br><span class="line">      currentAngle += angle;</span><br><span class="line">    &#125;</span><br><span class="line">    context.closePath();</span><br><span class="line"></span><br><span class="line">    // draw data</span><br><span class="line">    var MaxValue = Math.max.apply(null, that.options.data[0].value);</span><br><span class="line">    that.options.data.forEach(function(val) &#123;</span><br><span class="line">      var temp = Math.max.apply(null, val.value);</span><br><span class="line">      if (temp &gt; MaxValue) MaxValue = temp;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (MaxValue &gt; 10) &#123;</span><br><span class="line">      MaxValue = Math.ceil(MaxValue / 10) * 10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    that.options.data.forEach(function(val) &#123;</span><br><span class="line">      context.beginPath();</span><br><span class="line">      context.setStrokeStyle(val.color);</span><br><span class="line">      var currentRad = radius * val.value[0] / MaxValue * step / MaxStep;</span><br><span class="line">      context.moveTo(center.x, center.y - currentRad);</span><br><span class="line">      var currentAngle = -Math.PI / 2;</span><br><span class="line">      for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">        currentRad = radius * val.value[i] / MaxValue * step / MaxStep;</span><br><span class="line">        context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle));</span><br><span class="line">        currentAngle += angle;</span><br><span class="line">      &#125;</span><br><span class="line">      currentRad = radius * val.value[0] / MaxValue * step / MaxStep;</span><br><span class="line">      context.lineTo(center.x, center.y - currentRad);</span><br><span class="line">      context.stroke();</span><br><span class="line">      if (that.options.area) &#123;</span><br><span class="line">        context.setFillStyle(val.color);</span><br><span class="line">        context.setGlobalAlpha(0.5);</span><br><span class="line">        context.fill();</span><br><span class="line">      &#125;</span><br><span class="line">      context.closePath();</span><br><span class="line">    &#125;);</span><br><span class="line">    context.draw();</span><br><span class="line">    step++;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    clearInterval(aniName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var aniName = setInterval(animation, 10);</span><br></pre></td></tr></table></figure><p>最终效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/2641798-d476058258f845d5.gif?imageMogr2/auto-orient/strip" alt="动画效果"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>😊 以上就是在微信小程序中绘制雷达图的方法。如有兴趣了解更多，可以查看完整代码：<a href="https://github.com/chmini-app/CHCharts-wechat" target="_blank" rel="noopener">https://github.com/chmini-app/CHCharts-wechat</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;雷达图（Radar Chart），又可称为戴布拉图、蜘蛛网图（Spider Chart），是财务分析报表的一种。使用者能一目了然的了解各项指标的变动情形及其好坏趋向。&lt;br&gt;本文介绍如何在微信小程序中实现雷达图绘制。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="小程序" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://jane66.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="html" scheme="https://jane66.com/tags/html/"/>
    
      <category term="前端" scheme="https://jane66.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>小熊猫来到这个世界</title>
    <link href="https://jane66.com/2018/06/21/%E5%B0%8F%E7%86%8A%E7%8C%AB%E6%9D%A5%E5%88%B0%E4%B8%96%E7%95%8C/"/>
    <id>https://jane66.com/2018/06/21/小熊猫来到世界/</id>
    <published>2018-06-20T16:02:08.000Z</published>
    <updated>2019-01-09T05:25:20.082Z</updated>
    
    <content type="html"><![CDATA[<p>公元 2018 年 6 月 21 日，夏至，凌晨 2 点 08 分，成都华西附二院一声啼哭，小熊猫 🐼 来到了这个世界。</p><hr><a id="more"></a><p><img src="/gallary/IMG_0004.jpg" alt=""></p><p>似乎上天知道你八字缺水，出生的时候窗外下着淅沥沥的小雨。<br>似乎你知道自己叫“小熊猫”，一出生就握紧拳头，蜷着小手卖萌 😊。</p><hr><p><img src="/gallary/IMG_0005.jpg" alt=""></p><p>天使宝宝 👼，爸爸妈妈希望你永远健康快乐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公元 2018 年 6 月 21 日，夏至，凌晨 2 点 08 分，成都华西附二院一声啼哭，小熊猫 🐼 来到了这个世界。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="生活" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小熊猫" scheme="https://jane66.com/categories/%E7%94%9F%E6%B4%BB/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
    
      <category term="小熊猫" scheme="https://jane66.com/tags/%E5%B0%8F%E7%86%8A%E7%8C%AB/"/>
    
      <category term="新生" scheme="https://jane66.com/tags/%E6%96%B0%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>iOS实现类Prisma软件</title>
    <link href="https://jane66.com/2017/04/28/iOS%E5%AE%9E%E7%8E%B0%E7%B1%BBPrisma%E8%BD%AF%E4%BB%B6/"/>
    <id>https://jane66.com/2017/04/28/iOS实现类Prisma软件/</id>
    <published>2017-04-28T02:42:21.000Z</published>
    <updated>2019-01-08T05:33:09.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>Prisma 在 2016 上线后就大火，该 APP 是利用<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" target="_blank" rel="noopener">神经网络</a>和<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD" target="_blank" rel="noopener">人工智能</a>技术，为普通照片加入艺术效果的照片编辑软件。</p><p>同年 Google 也发布了一篇《A LEARNED REPRESENTATION FOR ARTISTIC STYLE》论文，实现了前向运算一次为照片整合多种艺术风格的功能，并且优化了内存使用和运算速度，可以在移动设备上快速运算。</p><p>最近在研究 Tensorflow 整合 iOS 过程中，发现 google 公开了论文实现的源码和训练数据，也就是说我们可以通过自己写一个前向运算图，整合其训练参数就可以快速实现类 Prisma 的应用。</p><p>下面就介绍一下如何在 iPhone 上跑一个自己的<strong>“Prisma”</strong>。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/2641798-ab4749c205d9f6f8.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="招财和咕噜"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><hr><ol><li>安装<a href="https://www.tensorflow.org/versions/r0.12/get_started/os_setup.html#download-and-setup" target="_blank" rel="noopener">Tensorflow</a>，这个官网上有详细教程这里就不多说了。</li><li>搭建<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/ios_examples/" target="_blank" rel="noopener">iOS+Tensorflow</a>工程，这个可以根据 Git 上的步骤实现，也可以参考官方的 Demo 程序配置。（这个过程有很多坑，多次尝试，应该可以配置成功）</li><li>下载模型，本次使用的模型是<a href="https://github.com/tensorflow/magenta/tree/master/magenta/models/image_stylization" target="_blank" rel="noopener">image_stylization</a>，google 已开源在 GitHub 上。</li><li>下载训练好的参数，Google 提供了 2 个：<br><a href="http://download.magenta.tensorflow.org/models/multistyle-pastiche-generator-monet.ckpt" target="_blank" rel="noopener">Monet</a><br><a href="http://download.magenta.tensorflow.org/models/multistyle-pastiche-generator-varied.ckpt" target="_blank" rel="noopener">Varied</a><br>Monet 训练了 10 种艺术图片，Varied 训练了 32 种。<br>当然你也可以自己训练艺术图片，但是得下载 VGG 的训练参数和 ImageNet 数据，然后自己训练，比较花时间。</li></ol><h2 id="构建计算图"><a href="#构建计算图" class="headerlink" title="构建计算图"></a>构建计算图</h2><hr><p>虽然 Google 提供了模型的源码，但是并没有在源码中输出运算图已方便迁移到移动设备中使用，Android 的 Demo 中倒是提供了生成的 pb，如何觉得自己写计算图麻烦可以直接拷到自己 iOS 工程中使用。</p><p>我这里创建了一个 python 的工程，然后把 Google 源码中 model.py 相关的文件都加入了工程。<br>我的建图代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import ast</span><br><span class="line">import os</span><br><span class="line">from tensorflow.python import pywrap_tensorflow</span><br><span class="line"></span><br><span class="line">from matplotlib import pyplot</span><br><span class="line">from matplotlib.pyplot import imshow</span><br><span class="line"></span><br><span class="line">import image_utils</span><br><span class="line">import model</span><br><span class="line">import ops</span><br><span class="line">import argparse</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_styles = 32</span><br><span class="line">imgWidth = 512</span><br><span class="line">imgHeight = 512</span><br><span class="line">channel = 3</span><br><span class="line">checkpoint = &quot;/Users/Jiao/Desktop/TFProject/style-image/checkpoint/multistyle-pastiche-generator-varied.ckpt&quot;</span><br><span class="line"></span><br><span class="line">inputImage = tf.placeholder(tf.float32,shape=[None,imgWidth,imgHeight,channel],name=&quot;input&quot;)</span><br><span class="line">styles = tf.placeholder(tf.float32,shape=[num_styles],name=&quot;style&quot;)</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;&quot;):</span><br><span class="line">    transform = model.transform(inputImage,</span><br><span class="line">                            normalizer_fn=ops.weighted_instance_norm,</span><br><span class="line">                            normalizer_params=&#123;</span><br><span class="line">                                # &apos;weights&apos;: tf.constant(mixture),</span><br><span class="line">                                &apos;weights&apos; : styles,</span><br><span class="line">                                &apos;num_categories&apos;: num_styles,</span><br><span class="line">                                &apos;center&apos;: True,</span><br><span class="line">                                &apos;scale&apos;: True&#125;)</span><br><span class="line"></span><br><span class="line">model_saver = tf.train.Saver(tf.global_variables())</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.train.write_graph(sess.graph_def, &quot;/Users/Jiao/Desktop/TFProject/style-image/protobuf&quot;, &quot;input.pb&quot;)</span><br><span class="line">    #checkpoint = os.path.expanduser(checkpoint)</span><br><span class="line">    #if tf.gfile.IsDirectory(checkpoint):</span><br><span class="line">    #    checkpoint = tf.train.latest_checkpoint(checkpoint)</span><br><span class="line">    #    tf.logging.info(&apos;loading latest checkpoint file: &#123;&#125;&apos;.format(checkpoint))</span><br><span class="line">    #model_saver.restore(sess, checkpoint)</span><br><span class="line"></span><br><span class="line">    #newstyle = np.zeros([num_styles], dtype=np.float32)</span><br><span class="line">    #newstyle[18] = 0.5</span><br><span class="line">    #newstyle[17] = 0.5</span><br><span class="line">    #newImage = np.zeros((1,imgWidth,imgHeight,channel))</span><br><span class="line">    #style_image = transform.eval(feed_dict=&#123;inputImage:newImage,styles:newstyle&#125;)</span><br><span class="line">    #style_image = style_image[0]</span><br><span class="line">    #imshow(style_image)</span><br><span class="line">    #pyplot.show()</span><br></pre></td></tr></table></figure><p>这里输入节点是<code>input</code>和<code>style</code>，输出节点是 model 中的<code>transformer/expand/conv3/conv/Sigmoid</code>。</p><p>到此就将模型的计算图保存到了本地文件夹中。<br>接下来就是将图和 ckpt 中的参数合并，并且生成移动端的可以使用的 pb 文件，这一步可以参考我上一篇文章<a href="http://www.jianshu.com/p/f096fe2212ce" target="_blank" rel="noopener">《iOS+Tensorflow 实现图像识别》</a>，很容易就实现。</p><h2 id="iOS-工程"><a href="#iOS-工程" class="headerlink" title="iOS 工程"></a>iOS 工程</h2><hr><p>在上面准备工作中，如果你已经按步骤搭建好 iOS+TF 的工程，这里你只需要导入生成的最终 pb 文件就行了。工程结构如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2641798-ca34abd1c875504c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XCode工程"></p><p>然后在 iOS 使用 pb 文件，我这里直接导入了 Google 提供的<code>tensorflow_utils</code>，使用这个类里面的 LoadModel 方法可以很快的生成含有计算图的 session。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    tensorflow::Status load_status;</span><br><span class="line">    load_status = LoadModel(@&quot;rounded_graph&quot;, @&quot;pb&quot;, &amp;tf_session);</span><br><span class="line">    if (!load_status.ok()) &#123;</span><br><span class="line">        LOG(FATAL) &lt;&lt; &quot;Couldn&apos;t load model: &quot; &lt;&lt; load_status;</span><br><span class="line">    &#125;</span><br><span class="line">    currentStyle = 0;</span><br><span class="line">    isDone = true;</span><br><span class="line">    _styleImageView.layer.borderColor = [UIColor grayColor].CGColor;</span><br><span class="line">    _styleImageView.layer.borderWidth = 0.5;</span><br><span class="line">    _ogImageView.layer.borderColor = [UIColor grayColor].CGColor;</span><br><span class="line">    _ogImageView.layer.borderWidth = 0.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是获取图片，执行运算，生成艺术图片展示。这里图片需要转换成 bitmap 然后获取 data 值，展示图片也是相识的过程。具体代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">- (void)runCnn:(UIImage *)compressedImg</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char *pixels = [self getImagePixel:compressedImg];</span><br><span class="line">    int image_channels = 4;</span><br><span class="line">    tensorflow::Tensor image_tensor(</span><br><span class="line">                                    tensorflow::DT_FLOAT,</span><br><span class="line">                                    tensorflow::TensorShape(</span><br><span class="line">                                                            &#123;1, wanted_input_height, wanted_input_width, wanted_input_channels&#125;));</span><br><span class="line">    auto image_tensor_mapped = image_tensor.tensor&lt;float, 4&gt;();</span><br><span class="line">    tensorflow::uint8 *in = pixels;</span><br><span class="line">    float *out = image_tensor_mapped.data();</span><br><span class="line">    for (int y = 0; y &lt; wanted_input_height; ++y) &#123;</span><br><span class="line">        float *out_row = out + (y * wanted_input_width * wanted_input_channels);</span><br><span class="line">        for (int x = 0; x &lt; wanted_input_width; ++x) &#123;</span><br><span class="line">            tensorflow::uint8 *in_pixel =</span><br><span class="line">            in + (x * wanted_input_width * image_channels) + (y * image_channels);</span><br><span class="line">            float *out_pixel = out_row + (x * wanted_input_channels);</span><br><span class="line">            for (int c = 0; c &lt; wanted_input_channels; ++c) &#123;</span><br><span class="line">                out_pixel[c] = in_pixel[c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    tensorflow::Tensor style(tensorflow::DT_FLOAT, tensorflow::TensorShape(&#123;32&#125;));</span><br><span class="line">    float *style_data = style.tensor&lt;float, 1&gt;().data();</span><br><span class="line">    memset(style_data, 0, sizeof(float) * 32);</span><br><span class="line">    style_data[currentStyle] = 1;</span><br><span class="line"></span><br><span class="line">    if (tf_session.get()) &#123;</span><br><span class="line">        std::vector&lt;tensorflow::Tensor&gt; outputs;</span><br><span class="line">        tensorflow::Status run_status = tf_session-&gt;Run(</span><br><span class="line">                                                        &#123;&#123;contentNode, image_tensor&#125;,</span><br><span class="line">                                                            &#123;styleNode, style&#125;&#125;,</span><br><span class="line">                                                        &#123;outputNode&#125;,</span><br><span class="line">                                                        &#123;&#125;,</span><br><span class="line">                                                        &amp;outputs);</span><br><span class="line">        if (!run_status.ok()) &#123;</span><br><span class="line">            LOG(ERROR) &lt;&lt; &quot;Running model failed:&quot; &lt;&lt; run_status;</span><br><span class="line">            isDone = true;</span><br><span class="line">            free(pixels);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            float *styledData = outputs[0].tensor&lt;float,4&gt;().data();</span><br><span class="line">            UIImage *styledImg = [self createImage:styledData];</span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                _styleImageView.image = styledImg;</span><br><span class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    isDone = true;</span><br><span class="line">                    free(pixels);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (unsigned char *)getImagePixel:(UIImage *)image</span><br><span class="line">&#123;</span><br><span class="line">    int width = image.size.width;</span><br><span class="line">    int height = image.size.height;</span><br><span class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</span><br><span class="line">    unsigned char *rawData = (unsigned char*) calloc(height * width * 4, sizeof(unsigned char));</span><br><span class="line">    NSUInteger bytesPerPixel = 4;</span><br><span class="line">    NSUInteger bytesPerRow = bytesPerPixel * width;</span><br><span class="line">    NSUInteger bitsPerComponent = 8;</span><br><span class="line">    CGContextRef context = CGBitmapContextCreate(rawData, width, height,</span><br><span class="line"></span><br><span class="line">                                                 bitsPerComponent, bytesPerRow, colorSpace,</span><br><span class="line"></span><br><span class="line">                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);</span><br><span class="line"></span><br><span class="line">    CGColorSpaceRelease(colorSpace);</span><br><span class="line">    CGContextDrawImage(context, CGRectMake(0, 0, width, height), image.CGImage);</span><br><span class="line">    UIImage *ogImg = [UIImage imageWithCGImage:CGBitmapContextCreateImage(context)];</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        _ogImageView.image = ogImg;</span><br><span class="line">    &#125;);</span><br><span class="line">    CGContextRelease(context);</span><br><span class="line">    return rawData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIImage *)createImage:(float *)pixels</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char *rawData = (unsigned char*) calloc(wanted_input_height * wanted_input_width * 4, sizeof(unsigned char));</span><br><span class="line">    for (int y = 0; y &lt; wanted_input_height; ++y) &#123;</span><br><span class="line">        unsigned char *out_row = rawData + (y * wanted_input_width * 4);</span><br><span class="line">        for (int x = 0; x &lt; wanted_input_width; ++x) &#123;</span><br><span class="line">            float *in_pixel =</span><br><span class="line">            pixels + (x * wanted_input_width * 3) + (y * 3);</span><br><span class="line">            unsigned char *out_pixel = out_row + (x * 4);</span><br><span class="line">            for (int c = 0; c &lt; wanted_input_channels; ++c) &#123;</span><br><span class="line">                out_pixel[c] = in_pixel[c] * 255;</span><br><span class="line">            &#125;</span><br><span class="line">            out_pixel[3] = UINT8_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</span><br><span class="line">    NSUInteger bytesPerPixel = 4;</span><br><span class="line">    NSUInteger bytesPerRow = bytesPerPixel * wanted_input_width;</span><br><span class="line">    NSUInteger bitsPerComponent = 8;</span><br><span class="line">    CGContextRef context = CGBitmapContextCreate(rawData, wanted_input_width, wanted_input_height,</span><br><span class="line"></span><br><span class="line">                                                 bitsPerComponent, bytesPerRow, colorSpace,</span><br><span class="line"></span><br><span class="line">                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);</span><br><span class="line"></span><br><span class="line">    CGColorSpaceRelease(colorSpace);</span><br><span class="line">    UIImage *retImg = [UIImage imageWithCGImage:CGBitmapContextCreateImage(context)];</span><br><span class="line">    CGContextRelease(context);</span><br><span class="line">    free(rawData);</span><br><span class="line">    return retImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>这里说明一下，前面 python 工程已经定义了，我的输入和输出图片的大小是 512✕512。</em></p><h2 id="连接-iPhone，运行工程"><a href="#连接-iPhone，运行工程" class="headerlink" title="连接 iPhone，运行工程^_^"></a>连接 iPhone，运行工程^_^</h2><hr><p>最后连上手机运行，就可以自己创建自己的艺术类图片了。😊</p><p>放几张运行效果图：<br><img src="http://upload-images.jianshu.io/upload_images/2641798-d105c1089f62c634.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="截图1"></p><p><img src="http://upload-images.jianshu.io/upload_images/2641798-6b722e433ca66c5b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="截图2"></p><p><img src="http://upload-images.jianshu.io/upload_images/2641798-1b5acd6620b5b447.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="截图3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Prisma 在 2016 上线后就大火，该 APP 是利用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神经网络&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人工智能&lt;/a&gt;技术，为普通照片加入艺术效果的照片编辑软件。&lt;/p&gt;
&lt;p&gt;同年 Google 也发布了一篇《A LEARNED REPRESENTATION FOR ARTISTIC STYLE》论文，实现了前向运算一次为照片整合多种艺术风格的功能，并且优化了内存使用和运算速度，可以在移动设备上快速运算。&lt;/p&gt;
&lt;p&gt;最近在研究 Tensorflow 整合 iOS 过程中，发现 google 公开了论文实现的源码和训练数据，也就是说我们可以通过自己写一个前向运算图，整合其训练参数就可以快速实现类 Prisma 的应用。&lt;/p&gt;
&lt;p&gt;下面就介绍一下如何在 iPhone 上跑一个自己的&lt;strong&gt;“Prisma”&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="iOS" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/iOS/"/>
    
    
      <category term="移动端" scheme="https://jane66.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="机器学习" scheme="https://jane66.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="https://jane66.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>剖析【OC】中深复制与浅复制</title>
    <link href="https://jane66.com/2016/08/22/%E5%89%96%E6%9E%90%E3%80%90OC%E3%80%91%E4%B8%AD%E6%B7%B1%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%B5%85%E5%A4%8D%E5%88%B6/"/>
    <id>https://jane66.com/2016/08/22/剖析【OC】中深复制与浅复制/</id>
    <published>2016-08-22T02:58:02.000Z</published>
    <updated>2019-01-08T05:33:04.554Z</updated>
    
    <content type="html"><![CDATA[<p>在 OC 编程中，常常会用到对对象的复制，然后操作副本对象。然而对与应该选择何种对象复制的方式，复制后副本对象操作会不会影响原始对象等问题，我们往往没有过多考虑，而是凭借经验在编码。接下来就对 OC 中对象复制机制进行剖析，通过对复制机制的研究可以在编码中对对象的复制更加游刃有余。</p><p>首先，在 OC 中复制分为深复制与浅复制，一个比较认可的定义是：</p><blockquote><p><strong>深复制：</strong>复制对象引用与对象本身。<br><strong>浅复制：</strong>只复制对象引用。</p></blockquote><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/2641798-03dca550cc87313d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p><strong>那么哪些操作才是浅复制，哪些操作是深复制？</strong></p><p>所有的对象间赋值操作都是<strong>浅复制</strong>，仅仅复制了引用。如 CopyStr = Str1，这里 CopyStr 和 Str1 指向的同一内存地址，改变两者之间任何一个值，另一个都会随之改变。</p><p>试例代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">void assignTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----Assign Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSString *str1 = @&quot;Hello&quot;;</span><br><span class="line">    NSString *str2 = str1;</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class="line">    NSMutableString *str4 = str3;</span><br><span class="line">    [str3 appendString:@&quot; World&quot;];</span><br><span class="line">    [str4 appendString:@&quot;!&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str4 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str4);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str4);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:@&quot;Hello&quot;, nil];</span><br><span class="line">    NSMutableArray *arr2 = arr1;</span><br><span class="line">    [arr1 addObject:@&quot;World&quot;];</span><br><span class="line">    [arr2 addObject:@&quot;!&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p><strong>—–Assign Test—–</strong></p></blockquote><hr><p><strong>orignalStr : Hello</strong><br><strong>copyStr : Hello</strong><br><strong>orignalStr value address: 0x100002060</strong><br><strong>copyStr value address: 0x100002060</strong><br><strong>orignalStr pointer address: 0x7fff5fbff7a8</strong><br><strong>copyStr pointer address: 0x7fff5fbff7a0</strong></p><hr><p><strong>orignalStr : Hello World!</strong><br><strong>copyStr : Hello World!</strong><br><strong>orignalStr value address: 0x1002005c0</strong><br><strong>copyStr value address: 0x1002005c0</strong><br><strong>orignalStr pointer address: 0x7fff5fbff798</strong><br><strong>copyStr pointer address: 0x7fff5fbff790</strong></p><hr><p><strong>2016-08-22 11:35:20.312 CopyDemo[2046:72936] orignalArray : (</strong><br><strong>    Hello,</strong><br><strong>    World,</strong><br><strong>    “!”</strong><br><strong>)</strong><br><strong>2016-08-22 11:35:20.313 CopyDemo[2046:72936] copyArray : (</strong><br><strong>    Hello,</strong><br><strong>    World,</strong><br><strong>    “!”</strong><br><strong>)</strong><br><strong>orignalArray value address: 0x100406910</strong><br><strong>copyArray value address: 0x100406910</strong><br><strong>orignalArray pointer address: 0x7fff5fbff788</strong><br><strong>copyArray pointer address: 0x7fff5fbff780</strong></p><hr><p>通过上面结果我们可以看到，value 的地址都是一样的，而 pointer 的地址是不一样的，这就说明了赋值操作是浅复制，只是生成两份对象的引用，而对象本身还是同一份。原对象值和副本对象的值操作是相互影响的。</p><hr><p><strong>那么 OC 中如何实现深复制呢？ </strong></p><p>OC 中深复制是通过 copy 与 mutableCopy 方法实现（但不是都能达到深复制的目的），通过 copy 复制后的副本都是不可变的，通过 mutableCopy 复制后的副本都是可变的。如初始对象为 NSString 与 NSMutableString，通过 copy 后副本都是 NSString，而通过 mutableCopy 后都是 NSMutableString。<br>接下来分两种情况讨论 copy 与 mutableCopy：</p><p><strong>初始对象不可变（如 NSString、NSArray 等）</strong></p><p>调用 copy 方法也是<strong>浅复制</strong>，等同于直接赋值，因为复制过后的副本和原来的对象都是不可变的，所以调用 copy 本质就是赋值操作，复制了引用，但是都指向同一内存地址。<br>调用 mutableCopy 是<strong>深复制</strong>，副本成为了可变对象，但是操作副本，对初始对象的值不会产生影响。</p><p>试例代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">void constCopyTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----ConstCopy Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSString Copy-\n&quot;);</span><br><span class="line">    NSString *str1 = @&quot;Hello&quot;;</span><br><span class="line">    NSString *str2 = [str1 copy];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [str1 mutableCopy];</span><br><span class="line">    [str3 appendString:@&quot; World!&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSArray Copy-\n&quot;);</span><br><span class="line">    NSArray *arr1 = [NSArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil];</span><br><span class="line">    NSArray *arr2 = [arr1 copy];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr3 = [arr1 mutableCopy];</span><br><span class="line">    [arr3 addObject:@&quot;World&quot;];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;];</span><br><span class="line">    [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p><strong>—–ConstCopy Test—–</strong></p></blockquote><hr><p><strong>-NSString Copy-</strong><br><strong>orignalStr : Hello</strong><br><strong>copyStr : Hello</strong><br><strong>orignalStr value address: 0x100002060</strong><br><strong>copyStr value address: 0x100002060</strong><br><strong>orignalStr pointer address: 0x7fff5fbff7a8</strong><br><strong>copyStr pointer address: 0x7fff5fbff7a0</strong></p><hr><p><strong>orignalStr : Hello</strong><br><strong>copyStr : Hello World!</strong><br><strong>orignalStr value address: 0x100002060</strong><br><strong>copyStr value address: 0x1004074d0</strong><br><strong>orignalStr pointer address: 0x7fff5fbff7a8</strong><br><strong>copyStr pointer address: 0x7fff5fbff798</strong></p><hr><p><strong>-NSArray Copy-</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : (</strong><br><strong>    “Hello World!”</strong><br><strong>)</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : (</strong><br><strong>    “Hello World!”</strong><br><strong>)</strong><br><strong>orignalArray value address: 0x1001016b0</strong><br><strong>copyArray value address: 0x1001016b0</strong><br><strong>orignalArray pointer address: 0x7fff5fbff790</strong><br><strong>copyArray pointer address: 0x7fff5fbff788</strong></p><hr><p><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : (</strong><br><strong>    “Hello World! + str1 + str3”</strong><br><strong>)</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : (</strong><br><strong>    “Hello World! + str1 + str3”,</strong><br><strong>    World</strong><br><strong>)</strong><br><strong>orignalArray value address: 0x1001016b0</strong><br><strong>copyArray value address: 0x100300000</strong><br><strong>orignalArray pointer address: 0x7fff5fbff790</strong><br><strong>copyArray pointer address: 0x7fff5fbff780</strong></p><hr><p>输出结果可以看到，通过 copy 方法复制后的副本对象的 value 地址和原对象是一样的，所以针对不可变对象是用 copy 方法是浅复制。而 mutableCopy 方法复制后，副本对象的 value 和 pointer 地址都和原对象不一样了，说明 mutableCopy 方法是深复制。</p><p><strong>初始对象可变（如 NSMutableString、NSMutableArray 等）</strong></p><p>调用 copy 方法是<strong>深复制</strong>，因为这里副本是不可变的，所以只考虑初始对象改变。因为是深复制，初始对象无论怎么改变，副本的值都是不变的。<br>调用 mutableCopy 也是<strong>深复制</strong>，复制过后，副本与初始对象之间的改变都是独立不影响的，如初始对象 str = “example”，str+” append1”，副本 str+” append2”，最终输出结果会是初始对象为”example append1”，副本为”example append2”。</p><p>试例代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">void mutableCopyTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----MutableCopy Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSString Copy-\n&quot;);</span><br><span class="line">    NSMutableString *str1 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class="line">    NSString *str2 = [str1 copy];</span><br><span class="line">    [str1 appendString:@&quot; World&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [str1 mutableCopy];</span><br><span class="line">    [str1 appendString:@&quot; + str1&quot;];</span><br><span class="line">    [str3 appendString:@&quot; + str3&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSArray Copy-\n&quot;);</span><br><span class="line">    NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil];</span><br><span class="line">    NSArray *arr2 = [arr1 copy];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;];</span><br><span class="line">    [arr1 addObject:@&quot;Word&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr3 = [arr1 mutableCopy];</span><br><span class="line">    [arr1 addObject:@&quot;+arr1&quot;];</span><br><span class="line">    [arr3 addObject:@&quot;+arr3&quot;];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;];</span><br><span class="line">    [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p><strong>—–MutableCopy Test—–</strong></p></blockquote><hr><p><strong>-NSString Copy-</strong><br><strong>orignalStr : Hello World</strong><br><strong>copyStr : Hello</strong><br><strong>orignalStr value address: 0x100300080</strong><br><strong>copyStr value address: 0x6f6c6c654855</strong><br><strong>orignalStr pointer address: 0x7fff5fbff7a8</strong><br><strong>copyStr pointer address: 0x7fff5fbff7a0</strong></p><hr><p><strong>orignalStr : Hello World + str1</strong><br><strong>copyStr : Hello World + str3</strong><br><strong>orignalStr value address: 0x100300080</strong><br><strong>copyStr value address: 0x100300320</strong><br><strong>orignalStr pointer address: 0x7fff5fbff7a8</strong><br><strong>copyStr pointer address: 0x7fff5fbff798</strong></p><hr><p><strong>-NSArray Copy-</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : (</strong><br><strong>    “Hello World!”,</strong><br><strong>    Word</strong><br><strong>)</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : (</strong><br><strong>    “Hello World!”</strong><br><strong>)</strong><br><strong>orignalArray value address: 0x100300000</strong><br><strong>copyArray value address: 0x100300b00</strong><br><strong>orignalArray pointer address: 0x7fff5fbff790</strong><br><strong>copyArray pointer address: 0x7fff5fbff788</strong></p><hr><p><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : (</strong><br><strong>    “Hello World! + str1 + str3”,</strong><br><strong>    Word,</strong><br><strong>    “+arr1”</strong><br><strong>)</strong><br><strong>2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : (</strong><br><strong>    “Hello World! + str1 + str3”,</strong><br><strong>    Word,</strong><br><strong>    “+arr3”</strong><br><strong>)</strong><br><strong>orignalArray value address: 0x100300000</strong><br><strong>copyArray value address: 0x100300e40</strong><br><strong>orignalArray pointer address: 0x7fff5fbff790</strong><br><strong>copyArray pointer address: 0x7fff5fbff780</strong></p><hr><p>通过输出结果可以看到，对于可变对象，调用 copy 与 mutableCopy 方法都是深复制，因为副本的 value 和 pointer 地址都与原对象不同。</p><p><code>注：对于网上某些解释说NSArray/NSMutableArray NSDictionary/NSMutableDictionary只有浅复制，这里认为对于对象本身来说调用mutableCopy或对于可变对象调用copy都是深复制，只能说对于数组和字典这种复合结构深复制操作只是作用到外层对象，内部如果还有可变对象，仅仅就是引用的复制。（上面的例子中对于数组的第一个元素的操作可以很清楚的看出来。即使是对数组的深复制，然而改变第一个可变字符串，无论是副本数组还是原数组的第一个字符串都改变了。）</code></p><p>完整代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.m</span><br><span class="line">//  CopyDemo</span><br><span class="line">//</span><br><span class="line">//  Created by Jiao Liu on 6/23/16.</span><br><span class="line">//  Copyright © 2016 ChangHong. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">void mutableCopyTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----MutableCopy Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSString Copy-\n&quot;);</span><br><span class="line">    NSMutableString *str1 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class="line">    NSString *str2 = [str1 copy];</span><br><span class="line">    [str1 appendString:@&quot; World&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [str1 mutableCopy];</span><br><span class="line">    [str1 appendString:@&quot; + str1&quot;];</span><br><span class="line">    [str3 appendString:@&quot; + str3&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSArray Copy-\n&quot;);</span><br><span class="line">    NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil];</span><br><span class="line">    NSArray *arr2 = [arr1 copy];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;];</span><br><span class="line">    [arr1 addObject:@&quot;Word&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr3 = [arr1 mutableCopy];</span><br><span class="line">    [arr1 addObject:@&quot;+arr1&quot;];</span><br><span class="line">    [arr3 addObject:@&quot;+arr3&quot;];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;];</span><br><span class="line">    [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void constCopyTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----ConstCopy Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSString Copy-\n&quot;);</span><br><span class="line">    NSString *str1 = @&quot;Hello&quot;;</span><br><span class="line">    NSString *str2 = [str1 copy];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [str1 mutableCopy];</span><br><span class="line">    [str3 appendString:@&quot; World!&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;-NSArray Copy-\n&quot;);</span><br><span class="line">    NSArray *arr1 = [NSArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil];</span><br><span class="line">    NSArray *arr2 = [arr1 copy];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr3 = [arr1 mutableCopy];</span><br><span class="line">    [arr3 addObject:@&quot;World&quot;];</span><br><span class="line">    [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;];</span><br><span class="line">    [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr3);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr3);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void assignTest()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;-----Assign Test-----\n\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSString *str1 = @&quot;Hello&quot;;</span><br><span class="line">    NSString *str2 = str1;</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str1);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str2);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str1);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableString *str3 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class="line">    NSMutableString *str4 = str3;</span><br><span class="line">    [str3 appendString:@&quot; World&quot;];</span><br><span class="line">    [str4 appendString:@&quot;!&quot;];</span><br><span class="line">    printf(&quot;orignalStr : %s\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;copyStr : %s\n&quot;,[str4 cStringUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    printf(&quot;orignalStr value address: %p\n&quot;,str3);</span><br><span class="line">    printf(&quot;copyStr value address: %p\n&quot;,str4);</span><br><span class="line">    printf(&quot;orignalStr pointer address: %p\n&quot;,&amp;str3);</span><br><span class="line">    printf(&quot;copyStr pointer address: %p\n&quot;,&amp;str4);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:@&quot;Hello&quot;, nil];</span><br><span class="line">    NSMutableArray *arr2 = arr1;</span><br><span class="line">    [arr1 addObject:@&quot;World&quot;];</span><br><span class="line">    [arr2 addObject:@&quot;!&quot;];</span><br><span class="line">    NSLog(@&quot;orignalArray : %@&quot;,arr1);</span><br><span class="line">    NSLog(@&quot;copyArray : %@&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray value address: %p\n&quot;,arr1);</span><br><span class="line">    printf(&quot;copyArray value address: %p\n&quot;,arr2);</span><br><span class="line">    printf(&quot;orignalArray pointer address: %p\n&quot;,&amp;arr1);</span><br><span class="line">    printf(&quot;copyArray pointer address: %p\n&quot;,&amp;arr2);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        // insert code here...</span><br><span class="line">        assignTest();</span><br><span class="line">        constCopyTest();</span><br><span class="line">        mutableCopyTest();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>本文最早发布于长虹软服公众号，有兴趣的朋友可以去看一下：<br><a href="http://mp.weixin.qq.com/s?__biz=MzAwMjkxNjYzNA==&amp;mid=2247483852&amp;idx=1&amp;sn=9da01b2399427654ad12e36452f612c9&amp;scene=23&amp;srcid=0822iBXKqaGYwMOnRhVLxNVt#rd" target="_blank" rel="noopener">剖析【OC】中深复制与浅复制</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 OC 编程中，常常会用到对对象的复制，然后操作副本对象。然而对与应该选择何种对象复制的方式，复制后副本对象操作会不会影响原始对象等问题，我们往往没有过多考虑，而是凭借经验在编码。接下来就对 OC 中对象复制机制进行剖析，通过对复制机制的研究可以在编码中对对象的复制更加游刃有余。&lt;/p&gt;
&lt;p&gt;首先，在 OC 中复制分为深复制与浅复制，一个比较认可的定义是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;深复制：&lt;/strong&gt;复制对象引用与对象本身。&lt;br&gt;&lt;strong&gt;浅复制：&lt;/strong&gt;只复制对象引用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="iOS" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/iOS/"/>
    
    
      <category term="移动端" scheme="https://jane66.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2016微软探星 | Constraint Checker</title>
    <link href="https://jane66.com/2016/08/04/2016%E5%BE%AE%E8%BD%AF%E6%8E%A2%E6%98%9F-Constraint-Checker/"/>
    <id>https://jane66.com/2016/08/04/2016微软探星-Constraint-Checker/</id>
    <published>2016-08-04T02:56:12.000Z</published>
    <updated>2019-01-08T05:33:23.263Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 2016 年微软探星夏令营在线技术笔试，笔试结果是作为甄选微软 2016 校招技术类职位的重要参考之一。这个考试对于想进微软实习或工作的在校生来说还是蛮重要的。<br>本人闲来无聊也注册了帐号尝试了第一题，代码用 C++实现，比较乱，侥幸一次通过。下面直接看一下考题。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/2641798-0227972e7244b9eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>题目：</p><p>时间限制:10000ms<br>单点时限:1000ms<br>内存限制:256MB</p><p>描述<br>Given a set of constraints like <strong>0&lt;N&lt;=M&lt;=100</strong> and values for all the variables, write a checker program to determine if the constraints are satisfied.<br>More precisely, the format of constraints is:<br><strong>token op token op … op token</strong><br>where each token is either a constant integer or a variable represented by a capital letter and each op is either less-than ( &lt; ) or less-than-or-equal-to ( &lt;= ).<br>输入<br>The first line contains an integer N, the number of constraints. (1 ≤ N≤ 20)<br>Each of the following N lines contains a constraint in the previous mentioned format.<br>Then follows an integer T, the number of assignments to check. (1 ≤ T≤ 50)<br>Each assignment occupies K lines where K is the number of variables in the constraints.<br>Each line contains a capital letter and an integer, representing a variable and its value.<br>It is guaranteed that:</p><ol><li>Every token in the constraints is either an integer from 0 to 1000000 or an variable represented by a capital letter from ‘A’ to ‘Z’.</li><li>There is no space in the constraints.</li><li>In each assignment every variable appears exactly once and its value is from 0 to 1000000.<br>输出<br>For each assignment output Yes or No indicating if the constraints are satisfied.</li></ol><blockquote><p>样例输入<br>2<br>A&lt;B&lt;=E<br>3&lt;=E&lt;5<br>2<br>A 1<br>B 2<br>E 3<br>A 3<br>B 5<br>E 10</p></blockquote><blockquote><p>样例输出<br>Yes<br>No</p></blockquote><p>解释：<br>这道题题目还是比较容易理解，就是根据输入的若干个不等式，校验后面输入的数据是否都满足前面的不等式，满足就输出 Yes，只要有一个不满足就输出 No。如“A&lt;B&lt;=E，3&lt;=E&lt;5”这个两个关系式，对于输入 A ＝ 1，B ＝ 2，E ＝ 3 肯定满足，因为 1&lt;2&lt;=3，3&lt;=3&lt;5。而 A ＝ 3, B ＝ 5，E=10 就不满足，因为 3&lt;=10&lt;5 不成立。</p><p>分析：<br>1、由于有所有不等式都要通过校验才输出 Yes，那么代表我们要在输入的时候就将所有不等式关系都存起来方便后面校验，这里我用了一个 vector 来存储这些关系，后面校验的时候遍历 vector 里面所有的值，一个个校验。<br>2、由于每个不等式关系只有”&lt;”或者”&lt;=”，说明这个关系是递增的，所以我用了 multimap&lt;int，string&gt;来存储这种关系（multimap 对于 key 是自增长排序，并且可以存储相同的 key）。来看看我对关系式的一个转换函数：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">multimap&lt;int,string&gt; convertStrToMap(string operation)</span><br><span class="line">&#123;</span><br><span class="line">    multimap&lt;int,string&gt; mapOp;</span><br><span class="line">    size_t len = operation.length();</span><br><span class="line">    int rank = 0;</span><br><span class="line">    int prior = 0;</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        char letter = operation[i];</span><br><span class="line">        if (letter == &apos;&lt;&apos;) &#123;</span><br><span class="line">            string str = operation.substr(prior, i - prior);</span><br><span class="line">            mapOp.insert(make_pair(rank, str));</span><br><span class="line">            if (i - prior == 1) &#123;</span><br><span class="line">                if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">                    varMap.insert(make_pair(str[0], 0));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prior = i + 1;</span><br><span class="line">            rank++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (letter == &apos;=&apos;) &#123;</span><br><span class="line">            prior = i + 1;</span><br><span class="line">            rank--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string str = operation.substr(prior, len - prior);</span><br><span class="line">    mapOp.insert(make_pair(rank, str));</span><br><span class="line">    if (len - prior == 1) &#123;</span><br><span class="line">        if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">            varMap.insert(make_pair(str[0], 0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return mapOp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的 mapOp 就是将 string 类型的关系式转换后的 multimap，这里的 key 是 int 类型代表该变量或者数字是在关系式什么层级，value 是 string 类型方便后面转换成数字进行比较。例如，A&lt;B&lt;=E，在 multimap 中会存为｛0:A,1:B,1:E｝。这段代码还有个 varMap 变量，它是一个全局变量，用来记录关系式中出现的变量（题目规定了变量只能够是 A－Z）。<br>3、最后就是输入数据，更新 varMap，然后根据关系式比较看是否满足，输出结果。代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">int findValue(string input)</span><br><span class="line">&#123;</span><br><span class="line">    if (input.size() == 1 &amp;&amp; input[0] &gt;= &apos;A&apos; &amp;&amp; input[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">        return varMap[input[0]];</span><br><span class="line">    &#125;</span><br><span class="line">    return atoi(input.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void checker(vector&lt;multimap&lt;int,string&gt;&gt; opVec)</span><br><span class="line">&#123;</span><br><span class="line">    bool pass = true;</span><br><span class="line">    for (int i = 0; i &lt; opVec.size(); i++) &#123;</span><br><span class="line">        multimap&lt;int,string&gt; operation = opVec[i];</span><br><span class="line">        multimap&lt;int,string&gt;::iterator it;</span><br><span class="line">        int rank1 = -1, rank2 = -1;</span><br><span class="line">        int value1, value2;</span><br><span class="line">        string var1, var2;</span><br><span class="line">        for (it = operation.begin(); it !=operation.end(); it++) &#123;</span><br><span class="line">            if (rank1 == -1) &#123;</span><br><span class="line">                rank1 = it-&gt;first;</span><br><span class="line">                var1 = it-&gt;second;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            rank2 = it-&gt;first;</span><br><span class="line">            var2 = it-&gt;second;</span><br><span class="line">            value1 = findValue(var1);</span><br><span class="line">            value2 = findValue(var2);</span><br><span class="line">            if (rank1 == rank2) &#123; // &lt;=</span><br><span class="line">                if (value1 &lt;= value2) &#123;</span><br><span class="line">                    pass = true;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    pass = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else // &lt;</span><br><span class="line">            &#123;</span><br><span class="line">                if (value1 &lt; value2) &#123;</span><br><span class="line">                    pass = true;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    pass = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (!pass) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            var1 = var2;</span><br><span class="line">            rank1 = rank2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (!pass) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (pass) &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于前面关系式已经按结构存储好了，所以只需要一步步比较校验即可。层级一样的变量，value 想等通过，层级不一样的，value1&lt;value2 即可。</p><p>看一下判定结果：<br><img src="http://upload-images.jianshu.io/upload_images/2641798-645fb746e176c24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>完整代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.cpp</span><br><span class="line">//  Constraint Checker</span><br><span class="line">//</span><br><span class="line">//  Created by Jiao Liu on 7/18/16.</span><br><span class="line">//  Copyright © 2016 ChangHong. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">map&lt;char,int&gt; varMap;</span><br><span class="line"></span><br><span class="line">multimap&lt;int,string&gt; convertStrToMap(string operation)</span><br><span class="line">&#123;</span><br><span class="line">    multimap&lt;int,string&gt; mapOp;</span><br><span class="line">    size_t len = operation.length();</span><br><span class="line">    int rank = 0;</span><br><span class="line">    int prior = 0;</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        char letter = operation[i];</span><br><span class="line">        if (letter == &apos;&lt;&apos;) &#123;</span><br><span class="line">            string str = operation.substr(prior, i - prior);</span><br><span class="line">            mapOp.insert(make_pair(rank, str));</span><br><span class="line">            if (i - prior == 1) &#123;</span><br><span class="line">                if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">                    varMap.insert(make_pair(str[0], 0));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prior = i + 1;</span><br><span class="line">            rank++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (letter == &apos;=&apos;) &#123;</span><br><span class="line">            prior = i + 1;</span><br><span class="line">            rank--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string str = operation.substr(prior, len - prior);</span><br><span class="line">    mapOp.insert(make_pair(rank, str));</span><br><span class="line">    if (len - prior == 1) &#123;</span><br><span class="line">        if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">            varMap.insert(make_pair(str[0], 0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return mapOp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int findValue(string input)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    if (input.size() == 1 &amp;&amp; input[0] &gt;= &apos;A&apos; &amp;&amp; input[0] &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">        return varMap[input[0]];</span><br><span class="line">    &#125;</span><br><span class="line">    return atoi(input.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void checker(vector&lt;multimap&lt;int,string&gt;&gt; opVec)</span><br><span class="line">&#123;</span><br><span class="line">    bool pass = true;</span><br><span class="line">    for (int i = 0; i &lt; opVec.size(); i++) &#123;</span><br><span class="line">        multimap&lt;int,string&gt; operation = opVec[i];</span><br><span class="line">        multimap&lt;int,string&gt;::iterator it;</span><br><span class="line">        int rank1 = -1, rank2 = -1;</span><br><span class="line">        int value1, value2;</span><br><span class="line">        string var1, var2;</span><br><span class="line">        for (it = operation.begin(); it !=operation.end(); it++) &#123;</span><br><span class="line">            if (rank1 == -1) &#123;</span><br><span class="line">                rank1 = it-&gt;first;</span><br><span class="line">                var1 = it-&gt;second;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            rank2 = it-&gt;first;</span><br><span class="line">            var2 = it-&gt;second;</span><br><span class="line">            value1 = findValue(var1);</span><br><span class="line">            value2 = findValue(var2);</span><br><span class="line">            if (rank1 == rank2) &#123; // &lt;=</span><br><span class="line">                if (value1 &lt;= value2) &#123;</span><br><span class="line">                    pass = true;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    pass = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else // &lt;</span><br><span class="line">            &#123;</span><br><span class="line">                if (value1 &lt; value2) &#123;</span><br><span class="line">                    pass = true;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    pass = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!pass) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var1 = var2;</span><br><span class="line">            rank1 = rank2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!pass) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (pass) &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">    vector&lt;multimap&lt;int,string&gt;&gt; opVec;</span><br><span class="line">    while (N--) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        multimap&lt;int,string&gt; operation = convertStrToMap(op);</span><br><span class="line">        opVec.push_back(operation);</span><br><span class="line">    &#125;</span><br><span class="line">    int T;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        size_t numOfVar = varMap.size();</span><br><span class="line">        while (numOfVar--) &#123;</span><br><span class="line">            char letter;</span><br><span class="line">            int value;</span><br><span class="line">            cin&gt;&gt;letter&gt;&gt;value;</span><br><span class="line">            varMap[letter] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        checker(opVec);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目来源于 2016 年微软探星夏令营在线技术笔试，笔试结果是作为甄选微软 2016 校招技术类职位的重要参考之一。这个考试对于想进微软实习或工作的在校生来说还是蛮重要的。&lt;br&gt;本人闲来无聊也注册了帐号尝试了第一题，代码用 C++实现，比较乱，侥幸一次通过。下面直接看一下考题。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="ACM" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/ACM/"/>
    
    
      <category term="算法" scheme="https://jane66.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用DFS来排座位</title>
    <link href="https://jane66.com/2016/08/02/%E7%94%A8DFS%E6%9D%A5%E6%8E%92%E5%BA%A7%E4%BD%8D/"/>
    <id>https://jane66.com/2016/08/02/用DFS来排座位/</id>
    <published>2016-08-02T02:49:54.000Z</published>
    <updated>2019-01-08T05:32:46.651Z</updated>
    
    <content type="html"><![CDATA[<p>DFS（Depth-First-Search）深度优先算法，是搜索算法的一种。是一种在开发爬虫早期使用较多的方法。它的思想是从一个顶点 V0 开始，沿着一条路一直走到底，如果发现不能到达目标解，那就返回到上一个节点，然后从另一条路开始走到底，这种尽量往深处走的概念即是深度优先的概念。</p><p>深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/2641798-5ed96443e4c08337.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DFS"></p><p>下面以一个具体问题来看 DFS 的实现与实用。（问题来源[GCJ2016-1A]BFFs）</p><p><strong>Problem</strong><br>You are a teacher at the brand new Little Coders kindergarten. You have<strong>N</strong>kids in your class, and each one has a different student ID number from 1 through<strong>N</strong>. Every kid in your class has a single best friend forever (BFF), and you know who that BFF is for each kid. BFFs are not necessarily reciprocal – that is, B being A’s BFF does not imply that A is B’s BFF.<br>Your lesson plan for tomorrow includes an activity in which the participants must sit in a circle. You want to make the activity as successful as possible by building the largest possible circle of kids such that each kid in the circle is sitting directly next to their BFF, either to the left or to the right. Any kids not in the circle will watch the activity without participating.<br>What is the greatest number of kids that can be in the circle?<br><strong>Input</strong><br>The first line of the input gives the number of test cases,<strong>T</strong>.<strong>T</strong>test cases follow. Each test case consists of two lines. The first line of a test case contains a single integer<strong>N</strong>, the total number of kids in the class. The second line of a test case contains<strong>N</strong>integers<strong>F1</strong>,<strong>F2</strong>, …,<strong>FN</strong>, where<strong>Fi</strong>is the student ID number of the BFF of the kid with student ID i.<br><strong>Output</strong><br>For each test case, output one line containing “Case #x: y”, where x is the test case number (starting from 1) and y is the maximum number of kids in the group that can be arranged in a circle such that each kid in the circle is sitting next to his or her BFF.<br><strong>Limits</strong><br>1 ≤<strong>T</strong>≤ 100.<br>1 ≤<strong>Fi</strong>≤<strong>N</strong>, for all i.<br><strong>Fi</strong>≠ i, for all i. (No kid is their own BFF.)<br><strong>Small dataset</strong><br>3 ≤<strong>N</strong>≤ 10.<br><strong>Large dataset</strong><br>3 ≤<strong>N</strong>≤ 1000.<br><strong>Sample</strong></p><blockquote><p>Input<br>4<br>4<br>2 3 4 1<br>4<br>3 3 4 1<br>4<br>3 3 4 3<br>10<br>7 8 10 10 9 2 9 6 3 3<br>Output<br>Case #1: 4<br>Case #2: 3<br>Case #3: 3<br>Case #4: 6</p></blockquote><p>In sample case #4, the largest possible circle seats the following kids in the following order:7 9 3 10 4 1. (Any reflection or rotation of this circle would also work.) Note that the kid with student ID 1 is next to the kid with student ID 7, as required, because the list represents a circle.</p><p>解释：<br>一个幼儿园，有 N 个小朋友，编号从 1 到 N，每个孩子有一个永远最好的朋友。这个 BFF 不是相互的，A 是 B 的 BFF，不代表 B 也是 A 的的 BFF。接下来明天有节课需要小朋友坐成一个圈玩游戏，但是每个孩子都希望自己的左边或者右边坐的是自己的 BFF，没坐进去的小朋友就只能观看他们玩，那么这个圈最大能坐多少个小朋友？<br>输入第一个数 T 是测试数据的组数，然后每两行为一组，第一行一个数字是 N 小朋友的个数，第二行 N 个数字是编号 1 到 N 的孩子的最好朋友编号。<br>输出每行代表每组测试数据的最大圈坐小朋友数量。</p><p>分析：<br>第一步，我们需要找到每个孩子通过 BFF 这个关系单向能一共能链到多少孩子进来，这里就要用到 DFS 技术来实现。来看一下代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void dfs(int *input, bool *flag ,int start, NSMutableArray *array)</span><br><span class="line">&#123;</span><br><span class="line">    if (flag[start - 1] == true) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        flag[start - 1] = true;</span><br><span class="line">        [array addObject:[NSNumber numberWithInt:start]];</span><br><span class="line">        start = input[start - 1];</span><br><span class="line">        dfs(input, flag, start, array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 input 是 BFF 关系数组，flag 是标志某一个小孩是否访问过的数组，start 代表从哪个小孩开始搜索，array 是最后我们要的链。从 start 传入的小孩编号开始搜索，将 start 自己写到 array 中并标记为已访问，然后 start 更新为自己的 BFF，迭代调用 dfs，直到走到标记为已访问节点停止搜索。然后将分别从 1 到 N 编号的小孩为起点的形成的最长链的都存储起来。这里我们存在 chainArray 里面，方便后面使用。</p><p>第二步，我们用刚才保存的链来拼接环，这里我们用一个数组来记录以每个孩子为起点的最大环长度 circle，同时用一个整数 maxNum 记录所有的环中最大值。然后我们开始遍历刚才记录在 chainArray 里面的链，计算他们能拼接最长环的大小。计算中分三种情况：<br>1、链的最后一位小朋友的最好朋友不是第一位与倒数第二位小孩。如：1-&gt;2-&gt;3-&gt;4，但是 4 的 BFF 是 2，那么这种链就是无效的，也不能够成环，长度就记为 0；<br>2、链的最后一位小朋友的最好朋友是第一位小孩。如：1-&gt;2-&gt;3-&gt;4，4 的 BFF 是 1，那么这种链就是自成环，长度记为链长度 4。<br>3、链的最后一位小朋友的最好朋友是倒数第二位小孩。如：1-&gt;2-&gt;3-&gt;4，4 的 BFF 是 3，这种链既自成环，又可以和其它以 3 结尾的链拼接成环，如 5-&gt;4-&gt;3，两个链拼接后就成了 1-&gt;2-&gt;3<->4&lt;-5。对于这种情况，我们就必须再次遍历所有链，找出和该链拼接后的最长链，记录为两链长度和减 2，并保存进 circle 中。<br>最后，每次更新过后环长度过后，需要更新 maxNum 的值。<br>实现代码如下：</-></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    for (int j = 0; j &lt; N; j++) &#123;</span><br><span class="line">        NSArray *array = [chainArray objectAtIndex:j];</span><br><span class="line">        int length = (int)array.count;</span><br><span class="line">        int LastIndex = [[array lastObject] intValue];</span><br><span class="line">        int nextValue = input[LastIndex - 1];</span><br><span class="line">        if (nextValue != [[array firstObject] intValue] &amp;&amp; nextValue != [[array objectAtIndex:array.count - 2] intValue]) &#123;</span><br><span class="line">            length = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if (nextValue == [[array objectAtIndex:array.count - 2] intValue]) &#123;</span><br><span class="line">                int MaxLength = 0;</span><br><span class="line">                for (NSArray *item in chainArray) &#123;</span><br><span class="line">                    int newLength = 0;</span><br><span class="line">                    if ([[item lastObject] intValue] == nextValue) &#123;</span><br><span class="line">                        newLength = length + (int)[item count] - 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                    MaxLength = MAX(MaxLength, newLength);</span><br><span class="line">                &#125;</span><br><span class="line">                length = MaxLength;</span><br><span class="line">                if (circle[nextValue - 1] &lt; length) &#123;</span><br><span class="line">                    circle[nextValue - 1] = length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxNum = MAX(maxNum, length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至此，我们基本找到了以所有孩子为起点能形成的单一环，但是并不是能形成的最大环。</p><p>第三步，找出最大的环大小，上面的 maxNum 已经记录了单环所能得到的最大值，但是对于如 1-&gt;2-&gt;3<->4<-5 这种回环，其实还是可以和其它回环进行拼接，如和="" 6-="">7<->8<-9 拼接，最后得到更大的环="" 1-="">2-&gt;3<->4&lt;-5\6-&gt;7<->8&lt;-9。所以我们需要把刚才 circle 中记录的回环长度都加起来除以 2，再来更新 maxNum 得到最终的结果，代码如下：</-></-></-9></-></-5></-></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    int tot = 0;</span><br><span class="line">    for (int k = 0; k &lt; N; k ++) &#123;</span><br><span class="line">        tot += circle[k];</span><br><span class="line">    &#125;</span><br><span class="line">    maxNum = MAX(maxNum, tot / 2);</span><br><span class="line">    return maxNum;</span><br></pre></td></tr></table></figure><p>至此，我们就完美的利用 DFS 完成了对小朋友排座位的任务。<br>看一下输出判定结果：</p><blockquote><p>Small input<br>16 pointsSolve C-small<br>Judge’s response for last submission: Correct.<br>Large input<br>29 pointsSolve C-large<br>Judge’s response for last submission: Correct.</p></blockquote><p>完整代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.m</span><br><span class="line">//  BFFs</span><br><span class="line">//</span><br><span class="line">//  Created by Jiao Liu on 4/16/16.</span><br><span class="line">//  Copyright © 2016 ChangHong. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">void dfs(int *input, bool *flag ,int start, NSMutableArray *array)</span><br><span class="line">&#123;</span><br><span class="line">    if (flag[start - 1] == true) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        flag[start - 1] = true;</span><br><span class="line">        [array addObject:[NSNumber numberWithInt:start]];</span><br><span class="line">        start = input[start - 1];</span><br><span class="line">        dfs(input, flag, start, array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long maxCircle(int *input, int N)</span><br><span class="line">&#123;</span><br><span class="line">    long maxNum = 0;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *chainArray = [NSMutableArray array];</span><br><span class="line">    int circle[N];</span><br><span class="line">    memset(circle, 0, sizeof(circle));</span><br><span class="line">    for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        bool flag[N];</span><br><span class="line">        memset(flag, false, sizeof(flag));</span><br><span class="line">        NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">        dfs(input, flag, i + 1, array);</span><br><span class="line">        [chainArray addObject:array];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (int j = 0; j &lt; N; j++) &#123;</span><br><span class="line">        NSArray *array = [chainArray objectAtIndex:j];</span><br><span class="line">        int length = (int)array.count;</span><br><span class="line">        int LastIndex = [[array lastObject] intValue];</span><br><span class="line">        int nextValue = input[LastIndex - 1];</span><br><span class="line">        if (nextValue != [[array firstObject] intValue] &amp;&amp; nextValue != [[array objectAtIndex:array.count - 2] intValue]) &#123;</span><br><span class="line">            length = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if (nextValue == [[array objectAtIndex:array.count - 2] intValue]) &#123;</span><br><span class="line">                int MaxLength = 0;</span><br><span class="line">                for (NSArray *item in chainArray) &#123;</span><br><span class="line">                    int newLength = 0;</span><br><span class="line">                    if ([[item lastObject] intValue] == nextValue) &#123;</span><br><span class="line">                        newLength = length + (int)[item count] - 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                    MaxLength = MAX(MaxLength, newLength);</span><br><span class="line">                &#125;</span><br><span class="line">                length = MaxLength;</span><br><span class="line">                if (circle[nextValue - 1] &lt; length) &#123;</span><br><span class="line">                    circle[nextValue - 1] = length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxNum = MAX(maxNum, length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int tot = 0;</span><br><span class="line">    for (int k = 0; k &lt; N; k ++) &#123;</span><br><span class="line">        tot += circle[k];</span><br><span class="line">    &#125;</span><br><span class="line">    maxNum = MAX(maxNum, tot / 2);</span><br><span class="line">    return maxNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        // insert code here...</span><br><span class="line">        freopen(&quot;/Users/Jiao/Desktop/CodeJam/BFFs/C-large-practice.in&quot;, &quot;r&quot;, stdin);</span><br><span class="line">//        freopen(&quot;/Users/Jiao/Desktop/CodeJam/BFFs/C-large-practice.out&quot;, &quot;w&quot;, stdout);</span><br><span class="line">        int T;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">        for (int i = 1; i&lt;=T; i++) &#123;</span><br><span class="line">            int N;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">            int Bffs[N];</span><br><span class="line">            for (int j = 0; j&lt;N; j++) &#123;</span><br><span class="line">                int bestFriend;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;bestFriend);</span><br><span class="line">                Bffs[j]=bestFriend;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;Case #%d: %ld\n&quot;,i,maxCircle(Bffs,N));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DFS（Depth-First-Search）深度优先算法，是搜索算法的一种。是一种在开发爬虫早期使用较多的方法。它的思想是从一个顶点 V0 开始，沿着一条路一直走到底，如果发现不能到达目标解，那就返回到上一个节点，然后从另一条路开始走到底，这种尽量往深处走的概念即是深度优先的概念。&lt;/p&gt;
&lt;p&gt;深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="ACM" scheme="https://jane66.com/categories/%E5%B7%A5%E4%BD%9C/ACM/"/>
    
    
      <category term="算法" scheme="https://jane66.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="GCJ" scheme="https://jane66.com/tags/GCJ/"/>
    
  </entry>
  
</feed>
