{"pages":[{"title":"","text":"欢迎来到小熊猫的花园 👏 这个是一个有情怀与爱心的\b乐园🏡\b\b\b\b\b\b\b，记录小熊猫🐼和招财🐱生活的点点滴滴。 大家有什么建议或帮助，可以通过下方\b多种方式👇联系我","link":"/about/index.html"}],"posts":[{"title":"11月万圣节～🎃","text":"都是视频 🎬，谨慎点击 👇： 晒太阳～～ 🌞： 挖挖机： 万圣节，我今天背了熊猫 🐼 哦： 给爷爷打电话 📱：","link":"/2019/11/25/11月万圣节～🎃/"},{"title":"2020 -> 2021💪","text":"2021🎆 新的一年： 惟愿山河锦绣、国泰民安！ 惟愿和顺致祥、幸福美满！ 周末乐园游玩 🏰：","link":"/2021/01/04/2020-2021💪/"},{"title":"2016微软探星 | Constraint Checker","text":"题目来源于 2016 年微软探星夏令营在线技术笔试，笔试结果是作为甄选微软 2016 校招技术类职位的重要参考之一。这个考试对于想进微软实习或工作的在校生来说还是蛮重要的。 本人闲来无聊也注册了帐号尝试了第一题，代码用 C++实现，比较乱，侥幸一次通过。下面直接看一下考题。 题目： 时间限制:10000ms 单点时限:1000ms 内存限制:256MB 描述 Given a set of constraints like 0&lt;N&lt;=M&lt;=100 and values for all the variables, write a checker program to determine if the constraints are satisfied. More precisely, the format of constraints is: token op token op … op token where each token is either a constant integer or a variable represented by a capital letter and each op is either less-than ( &lt; ) or less-than-or-equal-to ( &lt;= ). 输入 The first line contains an integer N, the number of constraints. (1 ≤ N≤ 20) Each of the following N lines contains a constraint in the previous mentioned format. Then follows an integer T, the number of assignments to check. (1 ≤ T≤ 50) Each assignment occupies K lines where K is the number of variables in the constraints. Each line contains a capital letter and an integer, representing a variable and its value. It is guaranteed that: Every token in the constraints is either an integer from 0 to 1000000 or an variable represented by a capital letter from ‘A’ to ‘Z’. There is no space in the constraints. In each assignment every variable appears exactly once and its value is from 0 to 1000000. 输出 For each assignment output Yes or No indicating if the constraints are satisfied. 样例输入 2 A&lt;B&lt;=E 3&lt;=E&lt;5 2 A 1 B 2 E 3 A 3 B 5 E 10 样例输出 Yes No 解释： 这道题题目还是比较容易理解，就是根据输入的若干个不等式，校验后面输入的数据是否都满足前面的不等式，满足就输出 Yes，只要有一个不满足就输出 No。如“A&lt;B&lt;=E，3&lt;=E&lt;5”这个两个关系式，对于输入 A ＝ 1，B ＝ 2，E ＝ 3 肯定满足，因为 1&lt;2&lt;=3，3&lt;=3&lt;5。而 A ＝ 3, B ＝ 5，E=10 就不满足，因为 3&lt;=10&lt;5 不成立。 分析： 1、由于有所有不等式都要通过校验才输出 Yes，那么代表我们要在输入的时候就将所有不等式关系都存起来方便后面校验，这里我用了一个 vector 来存储这些关系，后面校验的时候遍历 vector 里面所有的值，一个个校验。 2、由于每个不等式关系只有&quot;&lt;“或者”&lt;=&quot;，说明这个关系是递增的，所以我用了 multimap&lt;int，string&gt;来存储这种关系（multimap 对于 key 是自增长排序，并且可以存储相同的 key）。来看看我对关系式的一个转换函数： 123456789101112131415161718192021222324252627282930313233multimap&lt;int,string&gt; convertStrToMap(string operation){ multimap&lt;int,string&gt; mapOp; size_t len = operation.length(); int rank = 0; int prior = 0; for (int i = 0; i &lt; len; i++) { char letter = operation[i]; if (letter == &apos;&lt;&apos;) { string str = operation.substr(prior, i - prior); mapOp.insert(make_pair(rank, str)); if (i - prior == 1) { if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) { varMap.insert(make_pair(str[0], 0)); } } prior = i + 1; rank++; } if (letter == &apos;=&apos;) { prior = i + 1; rank--; } } string str = operation.substr(prior, len - prior); mapOp.insert(make_pair(rank, str)); if (len - prior == 1) { if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) { varMap.insert(make_pair(str[0], 0)); } } return mapOp;} 返回的 mapOp 就是将 string 类型的关系式转换后的 multimap，这里的 key 是 int 类型代表该变量或者数字是在关系式什么层级，value 是 string 类型方便后面转换成数字进行比较。例如，A&lt;B&lt;=E，在 multimap 中会存为｛0:A,1:B,1:E｝。这段代码还有个 varMap 变量，它是一个全局变量，用来记录关系式中出现的变量（题目规定了变量只能够是 A－Z）。 3、最后就是输入数据，更新 varMap，然后根据关系式比较看是否满足，输出结果。代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768int findValue(string input){ if (input.size() == 1 &amp;&amp; input[0] &gt;= &apos;A&apos; &amp;&amp; input[0] &lt;= &apos;Z&apos;) { return varMap[input[0]]; } return atoi(input.c_str());}void checker(vector&lt;multimap&lt;int,string&gt;&gt; opVec){ bool pass = true; for (int i = 0; i &lt; opVec.size(); i++) { multimap&lt;int,string&gt; operation = opVec[i]; multimap&lt;int,string&gt;::iterator it; int rank1 = -1, rank2 = -1; int value1, value2; string var1, var2; for (it = operation.begin(); it !=operation.end(); it++) { if (rank1 == -1) { rank1 = it-&gt;first; var1 = it-&gt;second; continue; } rank2 = it-&gt;first; var2 = it-&gt;second; value1 = findValue(var1); value2 = findValue(var2); if (rank1 == rank2) { // &lt;= if (value1 &lt;= value2) { pass = true; } else { pass = false; } } else // &lt; { if (value1 &lt; value2) { pass = true; } else { pass = false; } } if (!pass) { break; } var1 = var2; rank1 = rank2; } if (!pass) { break; } } if (pass) { cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl; } else { cout&lt;&lt;&quot;No&quot;&lt;&lt;endl; }} 由于前面关系式已经按结构存储好了，所以只需要一步步比较校验即可。层级一样的变量，value 想等通过，层级不一样的，value1&lt;value2 即可。 看一下判定结果： 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146//// main.cpp// Constraint Checker//// Created by Jiao Liu on 7/18/16.// Copyright © 2016 ChangHong. All rights reserved.//#include &lt;map&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;stdio.h&gt;#include &lt;iostream&gt;using namespace std;map&lt;char,int&gt; varMap;multimap&lt;int,string&gt; convertStrToMap(string operation){ multimap&lt;int,string&gt; mapOp; size_t len = operation.length(); int rank = 0; int prior = 0; for (int i = 0; i &lt; len; i++) { char letter = operation[i]; if (letter == &apos;&lt;&apos;) { string str = operation.substr(prior, i - prior); mapOp.insert(make_pair(rank, str)); if (i - prior == 1) { if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) { varMap.insert(make_pair(str[0], 0)); } } prior = i + 1; rank++; } if (letter == &apos;=&apos;) { prior = i + 1; rank--; } } string str = operation.substr(prior, len - prior); mapOp.insert(make_pair(rank, str)); if (len - prior == 1) { if (str[0] &gt;= &apos;A&apos; &amp;&amp; str[0] &lt;= &apos;Z&apos;) { varMap.insert(make_pair(str[0], 0)); } } return mapOp;}int findValue(string input){ if (input.size() == 1 &amp;&amp; input[0] &gt;= &apos;A&apos; &amp;&amp; input[0] &lt;= &apos;Z&apos;) { return varMap[input[0]]; } return atoi(input.c_str());}void checker(vector&lt;multimap&lt;int,string&gt;&gt; opVec){ bool pass = true; for (int i = 0; i &lt; opVec.size(); i++) { multimap&lt;int,string&gt; operation = opVec[i]; multimap&lt;int,string&gt;::iterator it; int rank1 = -1, rank2 = -1; int value1, value2; string var1, var2; for (it = operation.begin(); it !=operation.end(); it++) { if (rank1 == -1) { rank1 = it-&gt;first; var1 = it-&gt;second; continue; } rank2 = it-&gt;first; var2 = it-&gt;second; value1 = findValue(var1); value2 = findValue(var2); if (rank1 == rank2) { // &lt;= if (value1 &lt;= value2) { pass = true; } else { pass = false; } } else // &lt; { if (value1 &lt; value2) { pass = true; } else { pass = false; } } if (!pass) { break; } var1 = var2; rank1 = rank2; } if (!pass) { break; } } if (pass) { cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl; } else { cout&lt;&lt;&quot;No&quot;&lt;&lt;endl; }}int main(){ int N; scanf(&quot;%d&quot;,&amp;N); vector&lt;multimap&lt;int,string&gt;&gt; opVec; while (N--) { string op; cin &gt;&gt; op; multimap&lt;int,string&gt; operation = convertStrToMap(op); opVec.push_back(operation); } int T; scanf(&quot;%d&quot;,&amp;T); while (T--) { size_t numOfVar = varMap.size(); while (numOfVar--) { char letter; int value; cin&gt;&gt;letter&gt;&gt;value; varMap[letter] = value; } checker(opVec); } return 0;}","link":"/2016/08/04/2016微软探星-Constraint-Checker/"},{"title":"2022终章🎁","text":"十二月、暮岁。 青白玉，大雪封门。 一岁一礼，一寸欢喜。","link":"/2022/12/31/2022终章🎁/"},{"title":"9月日常","text":"《冰雪奇缘》👸： 乐园游玩 🎡： 生活日常：","link":"/2020/09/30/9月日常/"},{"title":"8月-9月记录","text":"喝水的我自带霸气 🍶： 不想起来啊： 又坐木马 🎠： 坐 BUS🚌：","link":"/2019/09/19/8月-9月记录/"},{"title":"Happy Jane's birthday! 🎂","text":"我的生日 🐼： 看喷泉 ⛲️： 看我来演奏 🎹： 我的梳妆台 🌹： 开车车 🚗： 排排坐，赤果果 🍎：","link":"/2019/06/21/Happy-Jane-s-birthday/"},{"title":"2020奇幻森林万圣节🎃","text":"Trick or treat, smell my feet, Give me something good to eat, Not too big, not to small, Just the size of Montreal! 认真完成任务 👻：","link":"/2020/10/31/2020奇幻森林万圣节🎃/"},{"title":"三岁生日快乐🎂","text":"～～～～祝你生日快乐 祝你生日快乐 祝你幸福祝你健康 祝你前途光明 祝你生日快乐 祝你生日快乐 祝你幸福祝你健康 有个温暖家庭 ～～～～","link":"/2021/06/21/三岁生日快乐🎂/"},{"title":"iOS实现类Prisma软件","text":"¶前言 Prisma 在 2016 上线后就大火，该 APP 是利用神经网络和人工智能技术，为普通照片加入艺术效果的照片编辑软件。 同年 Google 也发布了一篇《A LEARNED REPRESENTATION FOR ARTISTIC STYLE》论文，实现了前向运算一次为照片整合多种艺术风格的功能，并且优化了内存使用和运算速度，可以在移动设备上快速运算。 最近在研究 Tensorflow 整合 iOS 过程中，发现 google 公开了论文实现的源码和训练数据，也就是说我们可以通过自己写一个前向运算图，整合其训练参数就可以快速实现类 Prisma 的应用。 下面就介绍一下如何在 iPhone 上跑一个自己的**“Prisma”**。 ¶准备工作 安装Tensorflow，这个官网上有详细教程这里就不多说了。 搭建iOS+Tensorflow工程，这个可以根据 Git 上的步骤实现，也可以参考官方的 Demo 程序配置。（这个过程有很多坑，多次尝试，应该可以配置成功） 下载模型，本次使用的模型是image_stylization，google 已开源在 GitHub 上。 下载训练好的参数，Google 提供了 2 个： Monet Varied Monet 训练了 10 种艺术图片，Varied 训练了 32 种。 当然你也可以自己训练艺术图片，但是得下载 VGG 的训练参数和 ImageNet 数据，然后自己训练，比较花时间。 ¶构建计算图 虽然 Google 提供了模型的源码，但是并没有在源码中输出运算图已方便迁移到移动设备中使用，Android 的 Demo 中倒是提供了生成的 pb，如何觉得自己写计算图麻烦可以直接拷到自己 iOS 工程中使用。 我这里创建了一个 python 的工程，然后把 Google 源码中 model.py 相关的文件都加入了工程。 我的建图代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import numpy as npimport tensorflow as tfimport astimport osfrom tensorflow.python import pywrap_tensorflowfrom matplotlib import pyplotfrom matplotlib.pyplot import imshowimport image_utilsimport modelimport opsimport argparseimport sysnum_styles = 32imgWidth = 512imgHeight = 512channel = 3checkpoint = &quot;/Users/Jiao/Desktop/TFProject/style-image/checkpoint/multistyle-pastiche-generator-varied.ckpt&quot;inputImage = tf.placeholder(tf.float32,shape=[None,imgWidth,imgHeight,channel],name=&quot;input&quot;)styles = tf.placeholder(tf.float32,shape=[num_styles],name=&quot;style&quot;)with tf.name_scope(&quot;&quot;): transform = model.transform(inputImage, normalizer_fn=ops.weighted_instance_norm, normalizer_params={ # &apos;weights&apos;: tf.constant(mixture), &apos;weights&apos; : styles, &apos;num_categories&apos;: num_styles, &apos;center&apos;: True, &apos;scale&apos;: True})model_saver = tf.train.Saver(tf.global_variables())with tf.Session() as sess: tf.train.write_graph(sess.graph_def, &quot;/Users/Jiao/Desktop/TFProject/style-image/protobuf&quot;, &quot;input.pb&quot;) #checkpoint = os.path.expanduser(checkpoint) #if tf.gfile.IsDirectory(checkpoint): # checkpoint = tf.train.latest_checkpoint(checkpoint) # tf.logging.info(&apos;loading latest checkpoint file: {}&apos;.format(checkpoint)) #model_saver.restore(sess, checkpoint) #newstyle = np.zeros([num_styles], dtype=np.float32) #newstyle[18] = 0.5 #newstyle[17] = 0.5 #newImage = np.zeros((1,imgWidth,imgHeight,channel)) #style_image = transform.eval(feed_dict={inputImage:newImage,styles:newstyle}) #style_image = style_image[0] #imshow(style_image) #pyplot.show() 这里输入节点是input和style，输出节点是 model 中的transformer/expand/conv3/conv/Sigmoid。 到此就将模型的计算图保存到了本地文件夹中。 接下来就是将图和 ckpt 中的参数合并，并且生成移动端的可以使用的 pb 文件，这一步可以参考我上一篇文章《iOS+Tensorflow 实现图像识别》，很容易就实现。 ¶iOS 工程 在上面准备工作中，如果你已经按步骤搭建好 iOS+TF 的工程，这里你只需要导入生成的最终 pb 文件就行了。工程结构如图： 然后在 iOS 使用 pb 文件，我这里直接导入了 Google 提供的tensorflow_utils，使用这个类里面的 LoadModel 方法可以很快的生成含有计算图的 session。 1234567891011121314- (void)viewDidLoad { [super viewDidLoad]; tensorflow::Status load_status; load_status = LoadModel(@&quot;rounded_graph&quot;, @&quot;pb&quot;, &amp;tf_session); if (!load_status.ok()) { LOG(FATAL) &lt;&lt; &quot;Couldn&apos;t load model: &quot; &lt;&lt; load_status; } currentStyle = 0; isDone = true; _styleImageView.layer.borderColor = [UIColor grayColor].CGColor; _styleImageView.layer.borderWidth = 0.5; _ogImageView.layer.borderColor = [UIColor grayColor].CGColor; _ogImageView.layer.borderWidth = 0.5;} 最后就是获取图片，执行运算，生成艺术图片展示。这里图片需要转换成 bitmap 然后获取 data 值，展示图片也是相识的过程。具体代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111- (void)runCnn:(UIImage *)compressedImg{ unsigned char *pixels = [self getImagePixel:compressedImg]; int image_channels = 4; tensorflow::Tensor image_tensor( tensorflow::DT_FLOAT, tensorflow::TensorShape( {1, wanted_input_height, wanted_input_width, wanted_input_channels})); auto image_tensor_mapped = image_tensor.tensor&lt;float, 4&gt;(); tensorflow::uint8 *in = pixels; float *out = image_tensor_mapped.data(); for (int y = 0; y &lt; wanted_input_height; ++y) { float *out_row = out + (y * wanted_input_width * wanted_input_channels); for (int x = 0; x &lt; wanted_input_width; ++x) { tensorflow::uint8 *in_pixel = in + (x * wanted_input_width * image_channels) + (y * image_channels); float *out_pixel = out_row + (x * wanted_input_channels); for (int c = 0; c &lt; wanted_input_channels; ++c) { out_pixel[c] = in_pixel[c]; } } } tensorflow::Tensor style(tensorflow::DT_FLOAT, tensorflow::TensorShape({32})); float *style_data = style.tensor&lt;float, 1&gt;().data(); memset(style_data, 0, sizeof(float) * 32); style_data[currentStyle] = 1; if (tf_session.get()) { std::vector&lt;tensorflow::Tensor&gt; outputs; tensorflow::Status run_status = tf_session-&gt;Run( {{contentNode, image_tensor}, {styleNode, style}}, {outputNode}, {}, &amp;outputs); if (!run_status.ok()) { LOG(ERROR) &lt;&lt; &quot;Running model failed:&quot; &lt;&lt; run_status; isDone = true; free(pixels); } else { float *styledData = outputs[0].tensor&lt;float,4&gt;().data(); UIImage *styledImg = [self createImage:styledData]; dispatch_async(dispatch_get_main_queue(), ^{ _styleImageView.image = styledImg; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ isDone = true; free(pixels); }); }); } }}- (unsigned char *)getImagePixel:(UIImage *)image{ int width = image.size.width; int height = image.size.height; CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); unsigned char *rawData = (unsigned char*) calloc(height * width * 4, sizeof(unsigned char)); NSUInteger bytesPerPixel = 4; NSUInteger bytesPerRow = bytesPerPixel * width; NSUInteger bitsPerComponent = 8; CGContextRef context = CGBitmapContextCreate(rawData, width, height, bitsPerComponent, bytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big); CGColorSpaceRelease(colorSpace); CGContextDrawImage(context, CGRectMake(0, 0, width, height), image.CGImage); UIImage *ogImg = [UIImage imageWithCGImage:CGBitmapContextCreateImage(context)]; dispatch_async(dispatch_get_main_queue(), ^{ _ogImageView.image = ogImg; }); CGContextRelease(context); return rawData;}- (UIImage *)createImage:(float *)pixels{ unsigned char *rawData = (unsigned char*) calloc(wanted_input_height * wanted_input_width * 4, sizeof(unsigned char)); for (int y = 0; y &lt; wanted_input_height; ++y) { unsigned char *out_row = rawData + (y * wanted_input_width * 4); for (int x = 0; x &lt; wanted_input_width; ++x) { float *in_pixel = pixels + (x * wanted_input_width * 3) + (y * 3); unsigned char *out_pixel = out_row + (x * 4); for (int c = 0; c &lt; wanted_input_channels; ++c) { out_pixel[c] = in_pixel[c] * 255; } out_pixel[3] = UINT8_MAX; } } CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); NSUInteger bytesPerPixel = 4; NSUInteger bytesPerRow = bytesPerPixel * wanted_input_width; NSUInteger bitsPerComponent = 8; CGContextRef context = CGBitmapContextCreate(rawData, wanted_input_width, wanted_input_height, bitsPerComponent, bytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big); CGColorSpaceRelease(colorSpace); UIImage *retImg = [UIImage imageWithCGImage:CGBitmapContextCreateImage(context)]; CGContextRelease(context); free(rawData); return retImg;} 这里说明一下，前面 python 工程已经定义了，我的输入和输出图片的大小是 512✕512。 ¶连接 iPhone，运行工程 最后连上手机运行，就可以自己创建自己的艺术类图片了。😊 放几张运行效果图：","link":"/2017/04/28/iOS实现类Prisma软件/"},{"title":"七月份的尾巴","text":"七月份的尾巴， 你是狮子座。 私人温泉 ♨️： 巧虎乐园游玩 🏰：","link":"/2020/07/25/七月份的尾巴/"},{"title":"上早教咯","text":"太阳当空照 花儿对我笑 小鸟说早早早 你为什么背上小书包 我去上学校 天天不迟到 爱学习爱劳动 长大要为人民立功劳 加油我马上爬过去了： 翻越滚轮： 蹦床好好玩： 冲下来咯 😊： 真好玩 🏠：","link":"/2019/04/21/上早教咯/"},{"title":"上海迪士尼乐园🎆","text":"长发公主和我 👸：","link":"/2021/06/13/上海迪士尼乐园🎆/"},{"title":"世界读书日📚","text":"读书不觉已春深, 一寸光阴一寸金。","link":"/2022/04/23/世界读书日📚/"},{"title":"做客朋友家","text":"本宝宝今天到 👬 朋友家 🏠 做客，好开心 😄。 坐车车：","link":"/2019/01/10/做客朋友家/"},{"title":"中西碰撞之旅👁","text":"爱丽丝花园。让人仿佛置身于爱丽丝梦游仙境般的幻境之中，逃离现实的喧嚣，尽情享受美好时光。 汉服是中国传统的服饰，具有悠久的历史和独特的设计。穿上汉服，仿佛可以穿越时光，感受古代文化的魅力。而中式古建筑则是中国传统建筑艺术的代表，展现出中国古代建筑的精湛工艺和独特风格。 大英博物馆。这个世界著名的博物馆收藏了大量珍贵的文物和艺术品，包括福尔摩斯的犯罪搜查工具、阿拉丁的神灯、莎士比亚的手稿和诺丁汉猫的雕塑等等。在这里，您可以领略到世界各地不同文化的瑰宝，感受历史的厚重和文化的多样性。","link":"/2024/05/27/中西碰撞之旅👁/"},{"title":"体能训练合集🤸‍♀️","text":"小小的心情像天空， 美丽的彩虹乘着风。 我们的故事像星空， 美丽地让我感动。 运动的宝贝不会累， 因为有爱才完美。","link":"/2020/11/06/体能训练合集/"},{"title":"今天马杀鸡","text":"本宝宝今天体验 Massage，好舒服啊 😄。 阿姨你轻点 😂。","link":"/2019/01/16/今天马杀鸡/"},{"title":"元宵快乐","text":"听说今天成都放烟花了 🎆。 招财和我日常扯皮，顺便祝大家元宵节快乐 🧨。","link":"/2019/02/19/元宵快乐/"},{"title":"六一儿童节表演👗","text":"我们是祖国的花朵，阳光下尽情唱着歌。 看我们幸福的生活，像花儿五彩的颜色。 我们是祖国的花朵，请你要好好爱护我。 像热爱山川的辽阔，和美丽的江河。","link":"/2021/06/01/六一儿童节表演👗/"},{"title":"六月生日烩🎂","text":"生日快乐！ 愿你的生命之花在这一天绽放出最美的花朵，愿你的未来之路充满着无限的可能和希望！","link":"/2023/06/25/六月生日烩🎂/"},{"title":"八月份的前奏","text":"八月份的前奏， 你是狮子座。 认真上课的我 👩‍🎓：","link":"/2020/08/05/八月份的前奏/"},{"title":"冬季收获🍊","text":"园夫盛采摘，市贾争包裹。 车输动盈箱，舟载辄连柁。 采摘橘子🍊：","link":"/2021/12/22/冬季收获🍊/"},{"title":"冰雪女王👑","text":"《冰雪奇缘》： 小国阿伦黛尔因一个魔咒永远地被冰天雪地覆盖，为了寻回夏天，安娜公主和山民克里斯托夫以及他的驯鹿搭档组队出发，展开一段拯救王国的历险。 我也上台表演了 💃：","link":"/2020/12/07/冰雪女王👑/"},{"title":"冬游记❄️","text":"幸得识卿桃花面， 从此阡陌多暖春。","link":"/2022/01/28/冬游记❄️/"},{"title":"减肥","text":"13 斤的肥猫了 🐱，是时候减肥了！！！","link":"/2018/11/08/减肥/"},{"title":"出门晒太阳咯","text":"今天天气好，出门晒个太阳，把头哥不好当： 和兄弟姐妹排排坐： 妹儿，你的围巾还好看呢，给我看一哈嘛： 爬呀爬：","link":"/2019/03/03/出门晒太阳咯/"},{"title":"动物园🐒","text":"吃完饭去看 🐵： 长尾猴 🙉： 钓仓鼠 🐹：","link":"/2019/07/14/动物园/"},{"title":"半岁照","text":"我的半岁照，萌萌哒： 我最爱的面条： 好开心:","link":"/2019/02/28/半岁照/"},{"title":"又吃辅食了啦😊","text":"今天吃胡萝卜 🥕+ 米粉 🍚，连续吃了 10 多天胡萝卜后终于不抗拒了，做个不挑食的乖宝宝。","link":"/2019/01/06/又吃辅食了啦😊/"},{"title":"厦门行✈️","text":"今年国庆我和爸爸妈妈一起去了厦门，真是一个愉快的假期啊！厦门不仅有美丽的风景，还有许多好吃的美食，简直就是个吃货的天堂。 我们一到厦门就开始尝遍了当地的特色小吃，比如鼓浪屿的海鲜、沙茶面、花生汤等等。每一样都让人回味无穷，简直停不下来！爸爸妈妈还特意带我去吃了许多有名的餐厅，比如本土美食、闽南小吃等等，让我对厦门的美食文化有了更深的了解。 除了吃美食，我们还去了集美学村，参观了那里的建筑和文化。学村里有许多古老的建筑，每一处都透露着浓厚的历史文化气息，让人仿佛穿越回了过去。中山路则是购物的好去处，各种小店琳琅满目，让我买买买的心情都被激发了起来。 在厦门的黄厝海滩，我们还体验了一次刺激的水上运动，玩得不亦乐乎。海天一色，沙滩细软，阳光明媚，简直就是个度假的好去处！骑行环岛路更是让我感受到了厦门的浪漫与自然之美，路边的景色简直美得让人窒息。 而去了鼓浪屿看了蜡像、百年鼓浪屿更是让我大开眼界。鼓浪屿的建筑风格独特，蜡像馆更是收藏了许多名人的蜡像，让我仿佛置身于一个名人的世界中。百年鼓浪屿则是充满了浓厚的历史气息，每一处景点都让我感受到了那段岁月的痕迹。 总的来说，这次国庆假期真的是充实而愉快的。和爸爸妈妈一起旅行，感受到了家人之间的温暖和亲情，也让我对厦门这座城市有了更深的认识。希望以后还能和他们一起去更多的地方，创造更多美好的回忆。感恩这次的旅行，让我收获了满满的幸福和感动。期待下一次的相聚，一起再去探索未知的风景！","link":"/2024/10/08/厦门行✈️/"},{"title":"双节快乐🇨🇳","text":"生活就像一场旅行，不在于目的地的远近，而在于沿途的风景和体验。 享受每一个瞬间，珍惜每一段经历，不要让过去的遗憾和未来的担忧影响你的当下。 保持一颗自由自在的心，勇敢地面对挑战，迎接未知的未来。","link":"/2023/10/12/双节快乐🇨🇳/"},{"title":"听故事+晒太阳","text":"春日迟迟， 卉木萋萋。 仓庚喈喈， 采蘩祁祁。 晒太阳 🌞： 爬楼梯： 听故事 📖：","link":"/2019/05/11/听故事/"},{"title":"周末快乐","text":"大家好，我是小熊猫 😊： 坐火车： 看我爬得怎么样： 玩具店真好玩： 开跑车咯：","link":"/2019/03/16/周末快乐/"},{"title":"周末日常话剧+逗🐱","text":"第一次近距离看话剧，《绿野仙踪》🧝‍♀️： 我给招财喂鱼干 🐟：","link":"/2020/09/06/周末日常话剧-逗🐱/"},{"title":"周末大邑度假⛱️","text":"故人具鸡黍，邀我至田家。 绿树村边合，青山郭外斜。 开轩面场圃，把酒话桑麻。 待到重阳日，还来就菊花。 酒庄小车分队来了 🛴： 酒窖合照： 我是小司机 🚜： 温泉酒店休息 ♨️： 湖景风光 🏞：","link":"/2020/04/11/周末大邑度假⛱️/"},{"title":"周末生日爬梯🎂","text":"象服华年两鬓青。喜逢生日是嘉平。 熊猫 🐼 跳舞： 朋友家玩：","link":"/2020/10/18/周末生日爬梯🎂/"},{"title":"周末邛崃游玩记","text":"春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。 《爸爸去哪儿》第 N 集 😄： 狗蛋 Jane👧： 烤兔肉和 🥩：","link":"/2020/03/21/周末邛崃游玩记/"},{"title":"国际六一儿童节🎈","text":"Happy Children’s Day","link":"/2023/06/15/国际六一儿童节🎈/"},{"title":"周末阳光☀️","text":"周末是人们繁忙工作之余放松身心的时光，如何度过周末则显得格外重要。有时候，选择离开城市的喧嚣，走入大自然，体验露营的乐趣是一种不错的选择。在郊外的营地里，我们可以尽情玩水、烤肉、搭起帐篷露营，与家人或朋友们共同度过一个欢乐的周末。这样的活动不仅让我们远离城市的喧嚣，还能让我们重新感受大自然的美妙，放松心情，尽情享受生活。 另外，如果想要更加放松身心，体验温泉也是一个不错的选择。泡在温暖的温泉水中，让身体完全放松，舒缓压力，消除疲劳，对身心都有着极大的好处。无论是选择自然的野温泉还是去温泉度假村，都能让人尽情享受周末的惬意时光。","link":"/2024/04/28/周末阳光☀️/"},{"title":"国庆生活🇨🇳","text":"平衡车 🚴‍♀️： 体能训练 🤸‍♀️： 侏罗纪公园 🦕： 乐山游玩 🚣‍♀️：","link":"/2020/10/07/国庆生活🇨🇳/"},{"title":"圣诞节快到了哦🎄","text":"我和圣诞树 🎄： 早教课上面的工作 😯： 晚上看佩琦 🐷： 坐摇摇和车车 🚗：","link":"/2019/12/16/圣诞节快到了哦🎄/"},{"title":"小熊猫来到这个世界","text":"公元 2018 年 6 月 21 日，夏至，凌晨 2 点 08 分，成都华西附二院一声啼哭，小熊猫 🐼 来到了这个世界。 似乎上天知道你八字缺水，出生的时候窗外下着淅沥沥的小雨。 似乎你知道自己叫“小熊猫”，一出生就握紧拳头，蜷着小手卖萌 😊。 天使宝宝 👼，爸爸妈妈希望你永远健康快乐。","link":"/2018/06/21/小熊猫来到世界/"},{"title":"夏日限定☀️","text":"小荷才露尖尖角，早有蜻蜓立上头。 🧜🏻‍♀️ 🦸🏻‍♀️","link":"/2023/05/06/夏日限定☀️/"},{"title":"外面的世界","text":"外面的世界很精彩 外面的世界很无奈 当你觉得外面的世界很精彩 我会在这里衷心的祝福你","link":"/2019/05/31/外面的世界/"},{"title":"开荤","text":"今天是祖国生日，小熊猫也过节，开荤了 😛。","link":"/2018/10/01/开荤/"},{"title":"快速成长的我","text":"春风桃李花开日，秋雨梧桐叶落时。","link":"/2020/10/30/快速成长的我/"},{"title":"我上幼儿园了","text":"太阳当空照 花儿对我笑 小鸟说早早早 你为什么背上小书包 我去上学校 天天不迟到 爱学习爱劳动 长大要为人民立功劳","link":"/2021/03/10/我上幼儿园了/"},{"title":"微信小程序中绘制雷达图","text":"¶前言 雷达图（Radar Chart），又可称为戴布拉图、蜘蛛网图（Spider Chart），是财务分析报表的一种。使用者能一目了然的了解各项指标的变动情形及其好坏趋向。 本文介绍如何在微信小程序中实现雷达图绘制。 ¶绘制背景 首先我们需要绘制出雷达图后面的“蜘蛛网”。具体原理就是一层一层将多边形画出来，根据数据长度决定每一个点的位置和半径长度。 123456789101112131415161718192021var angle = Math.PI * 2 / length;for (var layer = 5; layer &gt; 0; layer--) { context.beginPath(); context.setGlobalAlpha(1); context.setStrokeStyle(&quot;#D3D3D3&quot;); if (layer % 2 != 0) { context.setFillStyle(&quot;white&quot;); } else { context.setFillStyle(&quot;#F5F5F5&quot;); } var currentRad = layer / 5 * radius; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } context.fill(); context.closePath(); context.stroke(); } 如代码所示，angle是根据数据长度决定的，这里为了好看，一共画五层，并且交替涂抹颜色。下图是length=6的效果： ¶绘制轴 接下来就是将各个顶点与圆心连接起来。有了“蜘蛛网”的经验，画轴就简单多了，只需要知道最外层顶点位置然后lineTo圆心就行了。 12345678910// draw Axiscontext.beginPath();var currentAngle = -Math.PI / 2;for (var i = 0; i &lt; length; i++) { context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle)); context.lineTo(center.x, center.y); currentAngle += angle;}context.closePath();context.stroke(); 以下是加上轴线后的效果： ¶绘制指标 接下来是将各个维度指标名字添加到图表上。同数轴一样，首先需要确定最外层顶点的位置，然后根据位置调整文字显示的基准，将文字写上去。 12345678910111213141516// draw Indexcontext.beginPath();context.setFillStyle(&quot;#D3D3D3&quot;);context.setFontSize(14);var currentAngle = -Math.PI / 2;for (var i = 0; i &lt; length; i++) { var posX = center.x + radius * Math.cos(currentAngle); var posY = center.y + radius * Math.sin(currentAngle); if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;); else context.setTextAlign(&quot;left&quot;); if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;); else context.setTextBaseline(&quot;bottom&quot;); context.fillText(that.options.xLabel[i], posX, posY); currentAngle += angle;}context.closePath(); 这里为了好看，对于文字要显示的位置小于中心点 x 坐标的靠右对齐，否则靠左对齐；对于文字位置大于中心点 y 坐标的基准设置在上方，否则在下方。以下是加上指标后的效果： ¶绘制数据 最后，我们将数据绘制到图表上。首先，我们要确定所有数据的最大值，如果最大值大于 10，那么取 10 的倍数。然后同画“蜘蛛网”一样，将各个数据点的半径根据相对于最大值比例换算出来，然后绘制在图表上。 1234567891011121314151617181920212223242526272829303132// draw datavar MaxValue = Math.max.apply(null, that.options.data[0].value);that.options.data.forEach(function(val) { var temp = Math.max.apply(null, val.value); if (temp &gt; MaxValue) MaxValue = temp;});if (MaxValue &gt; 10) { MaxValue = Math.ceil(MaxValue / 10) * 10}that.options.data.forEach(function(val) { context.beginPath(); context.setStrokeStyle(val.color); var currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { currentRad = radius * val.value[i] / MaxValue * step / MaxStep; context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.lineTo(center.x, center.y - currentRad); context.stroke(); if (that.options.area) { context.setFillStyle(val.color); context.setGlobalAlpha(0.5); context.fill(); } context.closePath();});context.draw(); 以下就是添加数据后的完整效果： ¶添加绘制动画 为了显示效果更佳，我们可以给绘制图表加上动画，具体实现如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394var angle = Math.PI * 2 / length;var step = 1;var MaxStep = that.options.animation ? 50 : 1;var animation = function() { if (step &lt;= MaxStep) { // draw background for (var layer = 5; layer &gt; 0; layer--) { context.beginPath(); context.setGlobalAlpha(1); context.setStrokeStyle(&quot;#D3D3D3&quot;); if (layer % 2 != 0) { context.setFillStyle(&quot;white&quot;); } else { context.setFillStyle(&quot;#F5F5F5&quot;); } var currentRad = layer / 5 * radius; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } context.fill(); context.closePath(); context.stroke(); } // draw Axis context.beginPath(); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle)); context.lineTo(center.x, center.y); currentAngle += angle; } context.closePath(); context.stroke(); // draw Index context.beginPath(); context.setFillStyle(&quot;#D3D3D3&quot;); context.setFontSize(14); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { var posX = center.x + radius * Math.cos(currentAngle); var posY = center.y + radius * Math.sin(currentAngle); if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;); else context.setTextAlign(&quot;left&quot;); if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;); else context.setTextBaseline(&quot;bottom&quot;); context.fillText(that.options.xLabel[i], posX, posY); currentAngle += angle; } context.closePath(); // draw data var MaxValue = Math.max.apply(null, that.options.data[0].value); that.options.data.forEach(function(val) { var temp = Math.max.apply(null, val.value); if (temp &gt; MaxValue) MaxValue = temp; }); if (MaxValue &gt; 10) { MaxValue = Math.ceil(MaxValue / 10) * 10 } that.options.data.forEach(function(val) { context.beginPath(); context.setStrokeStyle(val.color); var currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { currentRad = radius * val.value[i] / MaxValue * step / MaxStep; context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.lineTo(center.x, center.y - currentRad); context.stroke(); if (that.options.area) { context.setFillStyle(val.color); context.setGlobalAlpha(0.5); context.fill(); } context.closePath(); }); context.draw(); step++; } else { clearInterval(aniName); }}var aniName = setInterval(animation, 10); 最终效果如下： ¶结语 😊 以上就是在微信小程序中绘制雷达图的方法。如有兴趣了解更多，可以查看完整代码：https://github.com/chmini-app/CHCharts-wechat。","link":"/2018/08/29/微信小程序中绘制雷达图/"},{"title":"我两岁啦🎂","text":"一九二九，扇子不离手； 三九二十七，吃茶如蜜汁； 四九三十六，争向街头宿； 五九四十五，树头秋叶舞； 六九五十四，乘凉不入寺； 七九六十三，入眠寻被单； 八九七十二，被单添夹被； 九九八十一，家家打炭壑。 生日晚餐 🕯️： 纪念艺术照 🖼️：","link":"/2020/06/21/我两岁啦🎂/"},{"title":"我又来了😊","text":"咔嚓咔嚓 📷： 看跳舞的我 💃： 山羊你好 🐐：","link":"/2019/09/30/我又来了😊/"},{"title":"我的六一儿童节🎈","text":"六一的天空湛蓝如水， 六一甜美的歌声， 使我们那一颗颗晶莹剔透， 纯洁无比的心翼翼的绽开， 六一的梦悄悄绽放在我们身边， 六一的祝福温暖我们的心田， 六一的欢笑洋溢在我们周围， 六一的我们被霞光笼罩， 这是全世界小朋友的节日， 是所有小朋友热盼的节日， 祝所有小朋友六一节快乐。 Me &amp; Dad 👨‍👧： 做游戏咯 🥁：","link":"/2019/06/01/我的六一儿童节🎈/"},{"title":"我的五一节","text":"游泳 🏊‍♀️ 咯:","link":"/2019/05/01/我的五一节/"},{"title":"我的运动会🏃‍♀️","text":"","link":"/2020/06/01/我的运动会🏃‍♀️/"},{"title":"我的第一个证书","text":"今天潜水 🏊‍♀️ 成功，获得的人生第一个证书 😄。","link":"/2019/01/08/我的第一个证书/"},{"title":"我的周岁记录🎞️","text":"连雨不知春去，一晴方觉夏深 🌴： 阴阴夏木啭黄鹂： 梅子留酸软齿牙，芭蕉分绿与窗纱：","link":"/2019/07/21/我的周岁记录🎞️/"},{"title":"我要上春晚🧨","text":"哇，我好兴奋啊！因为我要上春晚啦！这次我和我幼儿园的同学一起表演了敦煌舞蹈，简直太刺激了。 我们在准备节目的时候，老师教我们跳舞，还让我们穿上漂亮的服装。虽然练习的时候有点累，但是看到大家一起努力，又觉得很开心。 终于，演出的那天到了。我和朋友们一起上了舞台，虽然有点紧张，但是一开始一响亮的音乐响起，我们就开始跳舞了。观众们都鼓掌欢呼，我感到特别自豪和开心。","link":"/2024/02/06/我要上春晚🧨/"},{"title":"招财捣蛋日常","text":"招财蔑视、千翻儿、抢妹妹的床睡。","link":"/2018/11/08/招财捣蛋日常/"},{"title":"新春快乐🧨","text":"春节假期，我和朋友决定去西双版纳，真是一次值得铭记的旅行！一到那里，浓厚的傣族文化就扑面而来，仿佛一下子穿越到了另一个世界。 我们体验了地道的孔雀宴。那些色香味俱全的菜肴不仅好吃，摆盘也相当艺术，简直让人舍不得动筷子！傣族的热情好客，让我们感受到一种家的温暖。 我们还参与了热闹非凡的泼水节。哇，真的是欢乐的海洋！大家都在互相泼水，欢笑声此起彼伏，水花四溅，瞬间融入了当地的节日气氛。记得有个小朋友用水枪喷了我一脸，简直太搞笑了！ 除了美食和节日活动，我们还进行了雨林徒步。那里的植物真是让人目不暇接，仿佛误入了一个天然的植物园。一路上，鸟儿的歌唱和树林的细语，仿佛在为我们的冒险伴奏。 我们还去参观了西双版纳最大的植物园，各种奇花异草让人大开眼界。阳光洒在绿树成荫的小道上，整个人都被这片自然的美丽陶醉了。 回到成都后，我和父母看了《哪吒》，将旅行的精彩再一次重温。总的来说，这次西双版纳之行，我和朋友们不仅享受了美味，体验了文化，更收获了无数的欢声笑语，真是一个难忘的春节假期！期待下次再来探险！ 成都","link":"/2025/02/05/新春快乐🧨/"},{"title":"新年快乐","text":"摆个 pose 祝大家猪年快乐 🎆，恭喜发财、🧧 红包拿来！！！","link":"/2019/02/04/新年快乐/"},{"title":"摘草莓🍓+小熊猫","text":"姐妹相邀摘草莓， 鲜红梦呓满篮堆。 品尝一颗心如蜜， 笑语和着云彩飞。 和“我”，小熊猫 🐼 合影：","link":"/2021/03/30/摘草莓🍓-小熊猫/"},{"title":"努力努力","text":"努力学习，快快成长 💪。","link":"/2019/01/02/努力努力/"},{"title":"春日大作战☀️","text":"手把青秧插满田，低头便见水中天。 六根清净方为道，退步原来是向前。 泥地作战🐾： 露营⛺️：","link":"/2022/06/13/春日大作战☀️/"},{"title":"春日游🌺","text":"云想衣裳花想容，春风拂槛露华浓。 若非群玉山头见，会向瑶台月下逢。 泰迪熊 🐻： 卡丁车 🏎️： 乐高 🤖️： 雪世界 🧊：","link":"/2021/04/19/春日游🌺/"},{"title":"旋转木马🎠","text":"旋转的木马没有翅膀 但却能够带着你到处飞翔","link":"/2019/07/01/旋转木马/"},{"title":"春日暖洋洋🍀","text":"春天的某个时候，我和神，悄悄地说了话。 --《春天》","link":"/2023/03/29/春日暖洋洋🍀/"},{"title":"春风十里🍃","text":"时光为渡， 人生为河， 眉目之书， 忆之岁月。 寻找失落的宝石： 丛林挑战；","link":"/2022/03/28/春风十里🍃/"},{"title":"普吉🏖️悠闲的假期","text":"准备起飞 🛫️： 准备出海 ⛵️： 沙滩玩耍 🏖️： 普吉美食 🍜： 累了一天酒店休息 🛏️：","link":"/2020/01/07/普吉🏖️悠闲的假期/"},{"title":"最新生活日记","text":"我是一个兵🪖 爱国爱人民 革命战争考验了我 立场更坚定 崇州品茶🍵： 爱吃面条的红皮狼🐺：","link":"/2021/10/13/最新生活日记/"},{"title":"毕业季🎓","text":"我不知道你是否还记得那个懵懂无知的幼儿园时代，那个充满童真和欢乐的时光。在我们猝不及防的情况下，我们会发现日子过得飞快，转眼间我们已经毕业了。是的，幼儿园毕业了！ 想起当年，我们进入幼儿园的时候，大多都是哭哭啼啼的离开父母，担心自己一个人在这个陌生的环境里会受欺负。但是随着时间的推移，我们发现幼儿园其实是一个充满欢笑和快乐的地方。我们在这里认识了很多好朋友，还学会了如何分享和合作，这些都是我们一生受用的技能。 当然，幼儿园毕业并不仅仅意味着我们要离开这个温暖的小天地，更意味着我们即将面临更多的挑战和困难。我们要去上小学了，要开始接触更多的知识和技能。但是纵使未来充满未知，我们也要坚定地向前走，相信自己可以应对任何挑战。 在毕业典礼上，我们穿着漂亮的礼服，头上插着一顶帽子，笑得灿烂而自豪。老师们用温暖的语言和深情的眼神祝福我们，告诉我们要勇敢地追逐梦想。而家长们则纷纷用相机和手机记录下这个珍贵的时刻，以便日后翻看时可以回味无穷。 所以，让我们毕业吧！让我们向着未来勇敢前行，相信自己，坚持不懈。让我们永远怀着童心，保持对生活的热爱和热情。即使面对困难和挑战，我们也要坚强地面对，不畏艰辛，勇往直前。因为我们已经从幼儿园那里学到了如何勇敢面对困难、如何乐观积极地面对生活。 所以，亲爱的小伙伴们，让我们共同庆祝幼儿园毕业，向着美好的未来出发吧！让我们用勇气和快乐去迎接生活的挑战，让我们永远怀着对未来的信心和希望，继续努力，不负韶华！幼儿园毕业，我们永远怀念！","link":"/2024/07/28/毕业季🎓/"},{"title":"泰好玩🇹🇭","text":"春节期间，全家人去了泰国普吉岛玩，经历了一次难忘的旅程。不得不说，泰国的阳光明媚，让人心情大好。我们住在沙滩旁的酒店，每天只需走出一条街就可以踏上普吉岛最大的沙滩。周围有许多美食选择，酒店的早餐也是丰盛又美味，让人食欲大开。游泳池更是大到让人眼花缭乱，玩起来简直是不亦乐乎。 第一天，我们去了大象营地玩，学到了许多关于大象的知识。原来泰国人民与大象有着深厚的情感纽带，大象在泰国可是备受尊重和喜爱的动物呢！我们还有幸给大象喂食，和它们拍了许多照片，一起在丛林中漫步，还给大象洗澡玩水。和这些温柔又强壮的生灵在一起，真是一种难忘的体验。 第二天，我们去了普吉岛的神仙半岛，目睹了壮丽的日落。景色之美令人陶醉，只是…打车的事情却不那么顺利。不过，一切都值得我们的等待和努力。 第三天，我们去了HW丛林飞跃，体验了刺激的滑索活动。从高空间滑过两棵树之间，还尝试了树降，让我们的心跳不止一次加速，充满了挑战与乐趣。 第四天，我们去了卡塔海滩学习了冲浪。掌握了冲浪的基本技巧后，我们成功地站在了2米长的冲浪板上，划起了美丽的浪花。虽然摔了不少跤，但这种挑战的乐趣却让我们难以忘怀。 泰国的普吉岛，不仅有着美丽的风景和丰富的活动选择，更有着浓厚的人文情怀和历史底蕴。这次旅行不仅给我们带来了快乐和刺激，更让我们对这个神奇国家有了更深的了解和认识。期待我们下一次的相聚，再次探索这个令人着迷的地方！","link":"/2024/02/20/泰好玩🇹🇭/"},{"title":"海洋公园游记🐬","text":"看海豚 🐬： 我是海盗 🏴‍☠️： 和热带鱼合影 🐠： 看爸爸妈妈做飞船 ✈️","link":"/2019/10/06/海洋公园游记🐬/"},{"title":"爱吃白果","text":"不想吃饭了： 球球真好玩： 听我在说什么？ 我要吃零食：","link":"/2019/03/21/爱吃白果/"},{"title":"独自看家","text":"都回老家过年了，本喵一个人在家，想怎么样就怎么样 😄。 还有人上门给服务，伸个懒腰，真舒服啊。","link":"/2019/02/06/独自看家/"},{"title":"爬爬好累啊","text":"以自然之道，养自然之身。 运动热身 💪： 木马+狗熊：","link":"/2019/04/09/爬爬好累啊/"},{"title":"牛年春节🐮","text":"爆竹声中一岁除，春风送暖入屠苏。 千门万户曈曈日，总把新桃换旧符。 新年嗮太阳 🌞：","link":"/2021/02/12/牛年春节🐮/"},{"title":"生日旅游🐬","text":"今年六月，我度过了一个令人难忘的生日，这段美好的时光将永远铭刻在我的记忆中。这次旅程不仅让我尽情享受了美食美景，还让我发现了生活中的很多惊喜与美好。 首先，我的生日旅行从长隆海洋王国开始。长隆海洋王国是一个集海洋动物展示、娱乐项目和生态保护为一体的综合主题公园。一进入海洋王国，我便被这里的壮观景象所吸引。五彩斑斓的鱼群在水中自在游动，巨大的鲸鲨从我眼前缓缓游过，鲨鱼馆的尖牙利齿和海豚表演的可爱灵动都让我目不暇接。特别是夜晚的海洋夜光大巡游，灯光与水花交融，梦幻与现实交织，仿佛进入了一个神秘的海底世界。 这次旅行中，我们入住了长隆海洋王国的企鹅酒店。酒店的装饰风格独特，每个角落都充满了海洋元素。特别是大堂中央那个巨大的企鹅雕塑，使人一下子就融入了浓浓的海洋氛围。房间里一只只毛茸茸的企鹅玩偶，甚至连洗漱用品都是企鹅形状，不禁令人感到温馨和趣味。在这里，每一天早晨睁开眼，就仿佛置身于南极的冰雪世界，充满了新奇与惊喜。 接下来的行程我们来到了澳门。澳门，这座融合了中西文化的城市，以其独特的历史风貌和现代化的娱乐设施吸引了无数游客。我们先去了大三巴牌坊，这是澳门的象征之一。这座由耶稣会士建造的教堂遗址，将欧洲文艺复兴时期的建筑风格与中国传统工艺完美结合。站在牌坊前，我不禁感叹：历史的变迁让这个城市保留了如此深厚的文化底蕴。 在澳门的老城区，我们还探访了议事亭前地。这里有着葡萄牙风格的街道、广场和建筑，让人仿佛置身于欧洲大陆。我们漫步在鹅卵石铺成的道路上，两旁是色彩缤纷的小店，空气中弥漫着葡式糕点的香甜味道。这份宁静和谐的美，让我陶醉其中。 当然，澳门最让人期待的还是它著名的美食！第一站我们去了大利来记吃了招牌蛋挞。外酥内嫩，蛋香浓郁的蛋挞，让人一口就爱上。此外，还有著名的葡国鸡、澳门水蟹粥、猪扒包，每一样都让我赞不绝口。可以说，在澳门的每一餐都是味觉的盛宴。 逛完景点，我们还体验了澳门的现代化娱乐设施。威尼斯人、金沙城中心和银河综合度假村等地的赌场和商场，充满了奢华与繁华。我们尤其喜欢威尼斯人酒店，酒店内部的运河两旁是琳琅满目的奢侈品商店，还有撑着舟、唱着歌的小船夫，营造出浓浓的水城威尼斯的氛围。 这次旅行不仅让我大开眼界，还让我感受到了旅行的意义和乐趣。与家人朋友一起欢度生日，分享美食和欢乐，共同探索新奇与未知，这一切都让我的内心充满了感激和喜悦。在长隆海洋王国、企鹅酒店和澳门，我不仅收获了美景、美食，更收获了满满的回忆和幸福感。 回到家后的我，每每想起这段旅程，心中总会涌现出温暖而甜蜜的感觉。这次旅行不仅是一次逃离日常的休闲，更是一次心灵的净化与升华。期待未来的日子里，还能有更多这样的美好时光，与亲朋好友共同创造更多的美好回忆！","link":"/2024/06/21/生日旅游🐬/"},{"title":"用DFS来排座位","text":"DFS（Depth-First-Search）深度优先算法，是搜索算法的一种。是一种在开发爬虫早期使用较多的方法。它的思想是从一个顶点 V0 开始，沿着一条路一直走到底，如果发现不能到达目标解，那就返回到上一个节点，然后从另一条路开始走到底，这种尽量往深处走的概念即是深度优先的概念。 深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。 下面以一个具体问题来看 DFS 的实现与实用。（问题来源[GCJ2016-1A]BFFs） Problem You are a teacher at the brand new Little Coders kindergarten. You haveNkids in your class, and each one has a different student ID number from 1 throughN. Every kid in your class has a single best friend forever (BFF), and you know who that BFF is for each kid. BFFs are not necessarily reciprocal – that is, B being A’s BFF does not imply that A is B’s BFF. Your lesson plan for tomorrow includes an activity in which the participants must sit in a circle. You want to make the activity as successful as possible by building the largest possible circle of kids such that each kid in the circle is sitting directly next to their BFF, either to the left or to the right. Any kids not in the circle will watch the activity without participating. What is the greatest number of kids that can be in the circle? Input The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines. The first line of a test case contains a single integerN, the total number of kids in the class. The second line of a test case containsNintegersF1,F2, …,FN, whereFiis the student ID number of the BFF of the kid with student ID i. Output For each test case, output one line containing “Case #x: y”, where x is the test case number (starting from 1) and y is the maximum number of kids in the group that can be arranged in a circle such that each kid in the circle is sitting next to his or her BFF. Limits 1 ≤T≤ 100. 1 ≤Fi≤N, for all i. Fi≠ i, for all i. (No kid is their own BFF.) Small dataset 3 ≤N≤ 10. Large dataset 3 ≤N≤ 1000. Sample Input 4 4 2 3 4 1 4 3 3 4 1 4 3 3 4 3 10 7 8 10 10 9 2 9 6 3 3 Output Case #1: 4 Case #2: 3 Case #3: 3 Case #4: 6 In sample case #4, the largest possible circle seats the following kids in the following order:7 9 3 10 4 1. (Any reflection or rotation of this circle would also work.) Note that the kid with student ID 1 is next to the kid with student ID 7, as required, because the list represents a circle. 解释： 一个幼儿园，有 N 个小朋友，编号从 1 到 N，每个孩子有一个永远最好的朋友。这个 BFF 不是相互的，A 是 B 的 BFF，不代表 B 也是 A 的的 BFF。接下来明天有节课需要小朋友坐成一个圈玩游戏，但是每个孩子都希望自己的左边或者右边坐的是自己的 BFF，没坐进去的小朋友就只能观看他们玩，那么这个圈最大能坐多少个小朋友？ 输入第一个数 T 是测试数据的组数，然后每两行为一组，第一行一个数字是 N 小朋友的个数，第二行 N 个数字是编号 1 到 N 的孩子的最好朋友编号。 输出每行代表每组测试数据的最大圈坐小朋友数量。 分析： 第一步，我们需要找到每个孩子通过 BFF 这个关系单向能一共能链到多少孩子进来，这里就要用到 DFS 技术来实现。来看一下代码： 12345678910111213void dfs(int *input, bool *flag ,int start, NSMutableArray *array){ if (flag[start - 1] == true) { return; } else { flag[start - 1] = true; [array addObject:[NSNumber numberWithInt:start]]; start = input[start - 1]; dfs(input, flag, start, array); }} 这里 input 是 BFF 关系数组，flag 是标志某一个小孩是否访问过的数组，start 代表从哪个小孩开始搜索，array 是最后我们要的链。从 start 传入的小孩编号开始搜索，将 start 自己写到 array 中并标记为已访问，然后 start 更新为自己的 BFF，迭代调用 dfs，直到走到标记为已访问节点停止搜索。然后将分别从 1 到 N 编号的小孩为起点的形成的最长链的都存储起来。这里我们存在 chainArray 里面，方便后面使用。 第二步，我们用刚才保存的链来拼接环，这里我们用一个数组来记录以每个孩子为起点的最大环长度 circle，同时用一个整数 maxNum 记录所有的环中最大值。然后我们开始遍历刚才记录在 chainArray 里面的链，计算他们能拼接最长环的大小。计算中分三种情况： 1、链的最后一位小朋友的最好朋友不是第一位与倒数第二位小孩。如：1-&gt;2-&gt;3-&gt;4，但是 4 的 BFF 是 2，那么这种链就是无效的，也不能够成环，长度就记为 0； 2、链的最后一位小朋友的最好朋友是第一位小孩。如：1-&gt;2-&gt;3-&gt;4，4 的 BFF 是 1，那么这种链就是自成环，长度记为链长度 4。 3、链的最后一位小朋友的最好朋友是倒数第二位小孩。如：1-&gt;2-&gt;3-&gt;4，4 的 BFF 是 3，这种链既自成环，又可以和其它以 3 结尾的链拼接成环，如 5-&gt;4-&gt;3，两个链拼接后就成了 1-&gt;2-&gt;3&lt;-&gt;4&lt;-5。对于这种情况，我们就必须再次遍历所有链，找出和该链拼接后的最长链，记录为两链长度和减 2，并保存进 circle 中。 最后，每次更新过后环长度过后，需要更新 maxNum 的值。 实现代码如下： 12345678910111213141516171819202122232425262728 for (int j = 0; j &lt; N; j++) { NSArray *array = [chainArray objectAtIndex:j]; int length = (int)array.count; int LastIndex = [[array lastObject] intValue]; int nextValue = input[LastIndex - 1]; if (nextValue != [[array firstObject] intValue] &amp;&amp; nextValue != [[array objectAtIndex:array.count - 2] intValue]) { length = 0; } else { if (nextValue == [[array objectAtIndex:array.count - 2] intValue]) { int MaxLength = 0; for (NSArray *item in chainArray) { int newLength = 0; if ([[item lastObject] intValue] == nextValue) { newLength = length + (int)[item count] - 2; } MaxLength = MAX(MaxLength, newLength); } length = MaxLength; if (circle[nextValue - 1] &lt; length) { circle[nextValue - 1] = length; } } } maxNum = MAX(maxNum, length); } 至此，我们基本找到了以所有孩子为起点能形成的单一环，但是并不是能形成的最大环。 第三步，找出最大的环大小，上面的 maxNum 已经记录了单环所能得到的最大值，但是对于如 1-&gt;2-&gt;3&lt;-&gt;4&lt;-5 这种回环，其实还是可以和其它回环进行拼接，如和 6-&gt;7&lt;-&gt;8&lt;-9 拼接，最后得到更大的环 1-&gt;2-&gt;3&lt;-&gt;4&lt;-5\\6-&gt;7&lt;-&gt;8&lt;-9。所以我们需要把刚才 circle 中记录的回环长度都加起来除以 2，再来更新 maxNum 得到最终的结果，代码如下： 123456 int tot = 0; for (int k = 0; k &lt; N; k ++) { tot += circle[k]; } maxNum = MAX(maxNum, tot / 2); return maxNum; 至此，我们就完美的利用 DFS 完成了对小朋友排座位的任务。 看一下输出判定结果： Small input 16 pointsSolve C-small Judge’s response for last submission: Correct. Large input 29 pointsSolve C-large Judge’s response for last submission: Correct. 完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697//// main.m// BFFs//// Created by Jiao Liu on 4/16/16.// Copyright © 2016 ChangHong. All rights reserved.//#import &lt;Foundation/Foundation.h&gt;void dfs(int *input, bool *flag ,int start, NSMutableArray *array){ if (flag[start - 1] == true) { return; } else { flag[start - 1] = true; [array addObject:[NSNumber numberWithInt:start]]; start = input[start - 1]; dfs(input, flag, start, array); }}long maxCircle(int *input, int N){ long maxNum = 0; NSMutableArray *chainArray = [NSMutableArray array]; int circle[N]; memset(circle, 0, sizeof(circle)); for (int i = 0; i &lt; N; i++) { bool flag[N]; memset(flag, false, sizeof(flag)); NSMutableArray *array = [NSMutableArray array]; dfs(input, flag, i + 1, array); [chainArray addObject:array]; } for (int j = 0; j &lt; N; j++) { NSArray *array = [chainArray objectAtIndex:j]; int length = (int)array.count; int LastIndex = [[array lastObject] intValue]; int nextValue = input[LastIndex - 1]; if (nextValue != [[array firstObject] intValue] &amp;&amp; nextValue != [[array objectAtIndex:array.count - 2] intValue]) { length = 0; } else { if (nextValue == [[array objectAtIndex:array.count - 2] intValue]) { int MaxLength = 0; for (NSArray *item in chainArray) { int newLength = 0; if ([[item lastObject] intValue] == nextValue) { newLength = length + (int)[item count] - 2; } MaxLength = MAX(MaxLength, newLength); } length = MaxLength; if (circle[nextValue - 1] &lt; length) { circle[nextValue - 1] = length; } } } maxNum = MAX(maxNum, length); } int tot = 0; for (int k = 0; k &lt; N; k ++) { tot += circle[k]; } maxNum = MAX(maxNum, tot / 2); return maxNum;}int main(int argc, const char * argv[]) { @autoreleasepool { // insert code here... freopen(&quot;/Users/Jiao/Desktop/CodeJam/BFFs/C-large-practice.in&quot;, &quot;r&quot;, stdin);// freopen(&quot;/Users/Jiao/Desktop/CodeJam/BFFs/C-large-practice.out&quot;, &quot;w&quot;, stdout); int T; scanf(&quot;%d&quot;,&amp;T); for (int i = 1; i&lt;=T; i++) { int N; scanf(&quot;%d&quot;,&amp;N); int Bffs[N]; for (int j = 0; j&lt;N; j++) { int bestFriend; scanf(&quot;%d&quot;,&amp;bestFriend); Bffs[j]=bestFriend; } printf(&quot;Case #%d: %ld\\n&quot;,i,maxCircle(Bffs,N)); } } return 0;}","link":"/2016/08/02/用DFS来排座位/"},{"title":"疫情下的研学📚","text":"青青园中葵，朝露待日晞。 阳春布德泽，万物生光辉。 常恐秋节至，焜黄华叶衰。 百川东到海，何时复西归？ 少壮不努力，老大徒伤悲。","link":"/2022/11/04/疫情下的研学📚/"},{"title":"百天party","text":"今天小熊猫和哥哥、姐姐、弟弟、妹妹一起 party go 😄：","link":"/2018/09/21/百天party/"},{"title":"碧峰峡游记⛰️","text":"烟笼群巅似雾生，云梯摇落若山雄。清流碧水千层瀑，峭壁悬崖万仞峰。 栈道蜿蜒凭险绕，浮阶暗涌入深丛。阑珊回首销魂处，跌宕浮沉暮雨城。 大老虎哦🐯：","link":"/2020/11/09/碧峰峡游记⛰️/"},{"title":"秋冬日常❄️","text":"秋冬季节是一年中最美丽的时光，当大地开始变得干燥、树叶变得金黄、红色和橙色，空气中充满清新的气息时，整个世界仿佛都变得美好起来。 秋天来临时，一切都开始变得迷人起来。天空中的云仿佛变得更加通透，太阳的光芒也变得柔和起来。在这个季节里，人们会选择去郊外，去欣赏漫天的金黄色和红色的树叶，拍摄美丽的风景照片，感受大自然的美好。同时，人们还可以享受到丰收的季节，品尝到各种美味的水果和蔬菜，感受到大自然的馈赠和美好。秋季的气候宜人，温暖的阳光下，享受户外运动更是一种特别的享受。 而当冬天悄悄来临时，一切都变得寂静起来。大地开始被白雪覆盖，整个世界仿佛被一层银装素裹所包围。冬天也是一个悠闲自在的季节，人们可以享受着在雪地里奔跑玩耍的乐趣，尽情地堆雪人、打雪仗，享受着大自然为我们带来的乐趣。同时还可以感受到鸟儿在寒冷的季节里为我们带来的温暖，听着他们在树林里的歌声，也是一种别样的享受。 秋冬季节是一个能让人们深切感受到大自然魅力的季节，让我们在这个季节里尽情享受大自然的馈赠吧！","link":"/2023/12/21/秋冬日常❄️/"},{"title":"第一次开车车🏎️","text":"我用第一人称 在漂移青春 输跟赢的分寸 都计算得很精准 我踏上风火轮 在漂移青春 故事中的我们 在演自己的人生 上车前闪一张 📷😊： 上车咯 🏎️：","link":"/2019/06/12/第一次开车车🏎️/"},{"title":"幼儿园春游🎡","text":"孤山寺北贾亭西，水面初平云脚低。 几处早莺争暖树，谁家新燕啄春泥。 乱花渐欲迷人眼，浅草才能没马蹄。 最爱湖东行不足，绿杨阴里白沙堤。","link":"/2021/05/08/第一次春游🎡/"},{"title":"蒙顶山游记⛰","text":"蒙山在县南十里， 今每岁贡茶， 为蜀之最。 🍵","link":"/2021/11/29/蒙顶山游记⛰/"},{"title":"秋天的收获🌾","text":"春种一粒粟,秋收万颗子。 幼儿园讲故事大赛获奖🏅： 官塘新村游玩：","link":"/2021/11/22/秋天的收获🌾/"},{"title":"阆中游记","text":"阆中古城中的民宿，闹中取静。 阆中美景 🌆:","link":"/2020/08/08/阆中游记/"},{"title":"西安行🚄","text":"中秋节是一个令人期待的节日，今年我和爸爸妈妈以及一群朋友一起选择了去西安游玩。西安是中国历史悠久的古都，拥有许多令人向往的景点和文化遗产。我们的行程安排非常紧凑，但每一个地方都让我们留下深刻的印象。 我们首先参观了兵马俑，这是中国古代帝王的陪葬坑，规模宏大，让人震撼。在秦汉博物馆，我们深入了解了秦汉时期的历史文化，感受到古代礼俗和文明的璀璨。 接着我们来到了大雁塔，这座古代建筑是唐朝的象征，保存完好，让人感叹古人的智慧和建筑工艺。在大唐不夜城，我们穿上了华丽的古装，仿佛穿越回了唐朝，还参加了神秘的麦克狐侦探剧本杀活动，让我们感受到了不一样的游玩方式。 当然，来到西安怎么能错过当地的美食呢？我们尝试了很多本地的特色小吃，包括肉夹馍、凉皮、羊肉泡馍等，每一样都让我们口齿留香，回味无穷。 这次中秋节的西安之行让我收获颇丰，不仅增长了见识，还与家人和朋友们共同度过了愉快的时光。我深深地爱上了这座古城，也期待着下次再来，继续探寻更多的历史和文化之美。中秋节快乐，西安，我们一定还会再见！","link":"/2024/09/17/西安行🚄/"},{"title":"西岭雪山游玩🏔️","text":"两个黄鹂鸣翠柳，一行白鹭上青天。 窗含西岭千秋雪，门泊东吴万里船。 出发前 🛴： 雪山草地 🏂： 和热气球合影： 晚上泡温泉 ♨️：","link":"/2020/05/04/西岭雪山游玩🏔️/"},{"title":"雪孩子与匹诺曹","text":"《雪孩子》⛄️： 冬天来了，一群&quot;小雪花&quot;飘然而至，如精灵般轻盈，演绎着美妙的雪花舞。突然，小雪花们看到了一个小雪人，大家七嘴八舌开始议论起来，他为什么和我们不一样？到底小雪人是从哪里来的？他在这里干什么呢？ 《匹诺曹》： 从前有一个老木匠叫盖比都，他家里非常穷，几乎每天都吃不饱饭。有一天，他用一块木头做了一个木偶，这个木偶一做出来就会说话，而且还叫他爸爸，这个老木匠非常高兴，于是就给小木偶取了个名字叫匹诺曹。 老木匠把自己唯一的破棉衣卖掉，用这些钱给匹诺曹买来书、笔、本和书包，然后让匹诺曹去上学。在上学的路上，匹诺曹遇到了瘸腿狐狸和瞎眼猫，他们先让匹诺曹把书、笔、本和书包都卖掉，然后为了骗钱想把匹诺曹吊死，后来一位仙女救了匹诺曹。 匹诺曹一直想成为一个好孩子，可是他非常顽皮，又非常好奇，还禁不住诱惑，所以经常上当受骗，而且还经常说谎，但是后来经过很多磨难以后，匹诺曹最终成为一个真正的好孩子。","link":"/2020/11/23/雪孩子与匹诺曹/"},{"title":"剖析【OC】中深复制与浅复制","text":"在 OC 编程中，常常会用到对对象的复制，然后操作副本对象。然而对与应该选择何种对象复制的方式，复制后副本对象操作会不会影响原始对象等问题，我们往往没有过多考虑，而是凭借经验在编码。接下来就对 OC 中对象复制机制进行剖析，通过对复制机制的研究可以在编码中对对象的复制更加游刃有余。 首先，在 OC 中复制分为深复制与浅复制，一个比较认可的定义是： **深复制：**复制对象引用与对象本身。 **浅复制：**只复制对象引用。 那么哪些操作才是浅复制，哪些操作是深复制？ 所有的对象间赋值操作都是浅复制，仅仅复制了引用。如 CopyStr = Str1，这里 CopyStr 和 Str1 指向的同一内存地址，改变两者之间任何一个值，另一个都会随之改变。 试例代码： 1234567891011121314151617181920212223242526272829303132333435363738void assignTest(){ printf(&quot;-----Assign Test-----\\n\\n&quot;); NSString *str1 = @&quot;Hello&quot;; NSString *str2 = str1; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [NSMutableString stringWithString:@&quot;Hello&quot;]; NSMutableString *str4 = str3; [str3 appendString:@&quot; World&quot;]; [str4 appendString:@&quot;!&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str4 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str3); printf(&quot;copyStr value address: %p\\n&quot;,str4); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str4); printf(&quot;\\n&quot;); NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:@&quot;Hello&quot;, nil]; NSMutableArray *arr2 = arr1; [arr1 addObject:@&quot;World&quot;]; [arr2 addObject:@&quot;!&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;);} 输出结果： -----Assign Test----- orignalStr : Hello copyStr : Hello orignalStr value address: 0x100002060 copyStr value address: 0x100002060 orignalStr pointer address: 0x7fff5fbff7a8 copyStr pointer address: 0x7fff5fbff7a0 orignalStr : Hello World! copyStr : Hello World! orignalStr value address: 0x1002005c0 copyStr value address: 0x1002005c0 orignalStr pointer address: 0x7fff5fbff798 copyStr pointer address: 0x7fff5fbff790 2016-08-22 11:35:20.312 CopyDemo[2046:72936] orignalArray : ( ** Hello,** ** World,** ** “!”** ) 2016-08-22 11:35:20.313 CopyDemo[2046:72936] copyArray : ( ** Hello,** ** World,** ** “!”** ) orignalArray value address: 0x100406910 copyArray value address: 0x100406910 orignalArray pointer address: 0x7fff5fbff788 copyArray pointer address: 0x7fff5fbff780 通过上面结果我们可以看到，value 的地址都是一样的，而 pointer 的地址是不一样的，这就说明了赋值操作是浅复制，只是生成两份对象的引用，而对象本身还是同一份。原对象值和副本对象的值操作是相互影响的。 **那么 OC 中如何实现深复制呢？ ** OC 中深复制是通过 copy 与 mutableCopy 方法实现（但不是都能达到深复制的目的），通过 copy 复制后的副本都是不可变的，通过 mutableCopy 复制后的副本都是可变的。如初始对象为 NSString 与 NSMutableString，通过 copy 后副本都是 NSString，而通过 mutableCopy 后都是 NSMutableString。 接下来分两种情况讨论 copy 与 mutableCopy： 初始对象不可变（如 NSString、NSArray 等） 调用 copy 方法也是浅复制，等同于直接赋值，因为复制过后的副本和原来的对象都是不可变的，所以调用 copy 本质就是赋值操作，复制了引用，但是都指向同一内存地址。 调用 mutableCopy 是深复制，副本成为了可变对象，但是操作副本，对初始对象的值不会产生影响。 试例代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849void constCopyTest(){ printf(&quot;-----ConstCopy Test-----\\n\\n&quot;); printf(&quot;-NSString Copy-\\n&quot;); NSString *str1 = @&quot;Hello&quot;; NSString *str2 = [str1 copy]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [str1 mutableCopy]; [str3 appendString:@&quot; World!&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str3); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;\\n&quot;); printf(&quot;-NSArray Copy-\\n&quot;); NSArray *arr1 = [NSArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil]; NSArray *arr2 = [arr1 copy]; [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;); NSMutableArray *arr3 = [arr1 mutableCopy]; [arr3 addObject:@&quot;World&quot;]; [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;]; [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr3); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr3); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr3); printf(&quot;\\n&quot;);} 输出结果： -----ConstCopy Test----- -NSString Copy- orignalStr : Hello copyStr : Hello orignalStr value address: 0x100002060 copyStr value address: 0x100002060 orignalStr pointer address: 0x7fff5fbff7a8 copyStr pointer address: 0x7fff5fbff7a0 orignalStr : Hello copyStr : Hello World! orignalStr value address: 0x100002060 copyStr value address: 0x1004074d0 orignalStr pointer address: 0x7fff5fbff7a8 copyStr pointer address: 0x7fff5fbff798 -NSArray Copy- 2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : ( ** “Hello World!”** ) 2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : ( ** “Hello World!”** ) orignalArray value address: 0x1001016b0 copyArray value address: 0x1001016b0 orignalArray pointer address: 0x7fff5fbff790 copyArray pointer address: 0x7fff5fbff788 2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : ( ** “Hello World! + str1 + str3”** ) 2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : ( ** “Hello World! + str1 + str3”,** ** World** ) orignalArray value address: 0x1001016b0 copyArray value address: 0x100300000 orignalArray pointer address: 0x7fff5fbff790 copyArray pointer address: 0x7fff5fbff780 输出结果可以看到，通过 copy 方法复制后的副本对象的 value 地址和原对象是一样的，所以针对不可变对象是用 copy 方法是浅复制。而 mutableCopy 方法复制后，副本对象的 value 和 pointer 地址都和原对象不一样了，说明 mutableCopy 方法是深复制。 初始对象可变（如 NSMutableString、NSMutableArray 等） 调用 copy 方法是深复制，因为这里副本是不可变的，所以只考虑初始对象改变。因为是深复制，初始对象无论怎么改变，副本的值都是不变的。 调用 mutableCopy 也是深复制，复制过后，副本与初始对象之间的改变都是独立不影响的，如初始对象 str = “example”，str+” append1”，副本 str+” append2”，最终输出结果会是初始对象为”example append1”，副本为”example append2”。 试例代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253void mutableCopyTest(){ printf(&quot;-----MutableCopy Test-----\\n\\n&quot;); printf(&quot;-NSString Copy-\\n&quot;); NSMutableString *str1 = [NSMutableString stringWithString:@&quot;Hello&quot;]; NSString *str2 = [str1 copy]; [str1 appendString:@&quot; World&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [str1 mutableCopy]; [str1 appendString:@&quot; + str1&quot;]; [str3 appendString:@&quot; + str3&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str3); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;\\n&quot;); printf(&quot;-NSArray Copy-\\n&quot;); NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil]; NSArray *arr2 = [arr1 copy]; [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;]; [arr1 addObject:@&quot;Word&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;); NSMutableArray *arr3 = [arr1 mutableCopy]; [arr1 addObject:@&quot;+arr1&quot;]; [arr3 addObject:@&quot;+arr3&quot;]; [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;]; [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr3); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr3); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr3); printf(&quot;\\n&quot;);} 输出结果： -----MutableCopy Test----- -NSString Copy- orignalStr : Hello World copyStr : Hello orignalStr value address: 0x100300080 copyStr value address: 0x6f6c6c654855 orignalStr pointer address: 0x7fff5fbff7a8 copyStr pointer address: 0x7fff5fbff7a0 orignalStr : Hello World + str1 copyStr : Hello World + str3 orignalStr value address: 0x100300080 copyStr value address: 0x100300320 orignalStr pointer address: 0x7fff5fbff7a8 copyStr pointer address: 0x7fff5fbff798 -NSArray Copy- 2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : ( ** “Hello World!”,** ** Word** ) 2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : ( ** “Hello World!”** ) orignalArray value address: 0x100300000 copyArray value address: 0x100300b00 orignalArray pointer address: 0x7fff5fbff790 copyArray pointer address: 0x7fff5fbff788 2016-08-22 11:35:20.314 CopyDemo[2046:72936] orignalArray : ( ** “Hello World! + str1 + str3”,** ** Word,** ** “+arr1”** ) 2016-08-22 11:35:20.314 CopyDemo[2046:72936] copyArray : ( ** “Hello World! + str1 + str3”,** ** Word,** ** “+arr3”** ) orignalArray value address: 0x100300000 copyArray value address: 0x100300e40 orignalArray pointer address: 0x7fff5fbff790 copyArray pointer address: 0x7fff5fbff780 通过输出结果可以看到，对于可变对象，调用 copy 与 mutableCopy 方法都是深复制，因为副本的 value 和 pointer 地址都与原对象不同。 注：对于网上某些解释说NSArray/NSMutableArray NSDictionary/NSMutableDictionary只有浅复制，这里认为对于对象本身来说调用mutableCopy或对于可变对象调用copy都是深复制，只能说对于数组和字典这种复合结构深复制操作只是作用到外层对象，内部如果还有可变对象，仅仅就是引用的复制。（上面的例子中对于数组的第一个元素的操作可以很清楚的看出来。即使是对数组的深复制，然而改变第一个可变字符串，无论是副本数组还是原数组的第一个字符串都改变了。） 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162//// main.m// CopyDemo//// Created by Jiao Liu on 6/23/16.// Copyright © 2016 ChangHong. All rights reserved.//#import &lt;Foundation/Foundation.h&gt;void mutableCopyTest(){ printf(&quot;-----MutableCopy Test-----\\n\\n&quot;); printf(&quot;-NSString Copy-\\n&quot;); NSMutableString *str1 = [NSMutableString stringWithString:@&quot;Hello&quot;]; NSString *str2 = [str1 copy]; [str1 appendString:@&quot; World&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [str1 mutableCopy]; [str1 appendString:@&quot; + str1&quot;]; [str3 appendString:@&quot; + str3&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str3); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;\\n&quot;); printf(&quot;-NSArray Copy-\\n&quot;); NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil]; NSArray *arr2 = [arr1 copy]; [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;]; [arr1 addObject:@&quot;Word&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;); NSMutableArray *arr3 = [arr1 mutableCopy]; [arr1 addObject:@&quot;+arr1&quot;]; [arr3 addObject:@&quot;+arr3&quot;]; [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;]; [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr3); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr3); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr3); printf(&quot;\\n&quot;);}void constCopyTest(){ printf(&quot;-----ConstCopy Test-----\\n\\n&quot;); printf(&quot;-NSString Copy-\\n&quot;); NSString *str1 = @&quot;Hello&quot;; NSString *str2 = [str1 copy]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [str1 mutableCopy]; [str3 appendString:@&quot; World!&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str3); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;\\n&quot;); printf(&quot;-NSArray Copy-\\n&quot;); NSArray *arr1 = [NSArray arrayWithObjects:[NSMutableString stringWithString:@&quot;Hello&quot;], nil]; NSArray *arr2 = [arr1 copy]; [[arr1 objectAtIndex:0] appendString:@&quot; World!&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;); NSMutableArray *arr3 = [arr1 mutableCopy]; [arr3 addObject:@&quot;World&quot;]; [[arr1 objectAtIndex:0] appendString:@&quot; + str1&quot;]; [[arr3 objectAtIndex:0] appendString:@&quot; + str3&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr3); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr3); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr3); printf(&quot;\\n&quot;);}void assignTest(){ printf(&quot;-----Assign Test-----\\n\\n&quot;); NSString *str1 = @&quot;Hello&quot;; NSString *str2 = str1; printf(&quot;orignalStr : %s\\n&quot;,[str1 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str2 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str1); printf(&quot;copyStr value address: %p\\n&quot;,str2); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str1); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str2); printf(&quot;\\n&quot;); NSMutableString *str3 = [NSMutableString stringWithString:@&quot;Hello&quot;]; NSMutableString *str4 = str3; [str3 appendString:@&quot; World&quot;]; [str4 appendString:@&quot;!&quot;]; printf(&quot;orignalStr : %s\\n&quot;,[str3 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;copyStr : %s\\n&quot;,[str4 cStringUsingEncoding:NSUTF8StringEncoding]); printf(&quot;orignalStr value address: %p\\n&quot;,str3); printf(&quot;copyStr value address: %p\\n&quot;,str4); printf(&quot;orignalStr pointer address: %p\\n&quot;,&amp;str3); printf(&quot;copyStr pointer address: %p\\n&quot;,&amp;str4); printf(&quot;\\n&quot;); NSMutableArray *arr1 = [NSMutableArray arrayWithObjects:@&quot;Hello&quot;, nil]; NSMutableArray *arr2 = arr1; [arr1 addObject:@&quot;World&quot;]; [arr2 addObject:@&quot;!&quot;]; NSLog(@&quot;orignalArray : %@&quot;,arr1); NSLog(@&quot;copyArray : %@&quot;,arr2); printf(&quot;orignalArray value address: %p\\n&quot;,arr1); printf(&quot;copyArray value address: %p\\n&quot;,arr2); printf(&quot;orignalArray pointer address: %p\\n&quot;,&amp;arr1); printf(&quot;copyArray pointer address: %p\\n&quot;,&amp;arr2); printf(&quot;\\n&quot;);}int main(int argc, const char * argv[]) { @autoreleasepool { // insert code here... assignTest(); constCopyTest(); mutableCopyTest(); } return 0;} 本文最早发布于长虹软服公众号，有兴趣的朋友可以去看一下： 剖析【OC】中深复制与浅复制","link":"/2016/08/22/剖析【OC】中深复制与浅复制/"}],"tags":[{"name":"小熊猫","slug":"小熊猫","link":"/tags/小熊猫/"},{"name":"算法","slug":"算法","link":"/tags/算法/"},{"name":"移动端","slug":"移动端","link":"/tags/移动端/"},{"name":"机器学习","slug":"机器学习","link":"/tags/机器学习/"},{"name":"tensorflow","slug":"tensorflow","link":"/tags/tensorflow/"},{"name":"游玩","slug":"游玩","link":"/tags/游玩/"},{"name":"招财","slug":"招财","link":"/tags/招财/"},{"name":"新生","slug":"新生","link":"/tags/新生/"},{"name":"小程序","slug":"小程序","link":"/tags/小程序/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"前端","slug":"前端","link":"/tags/前端/"},{"name":"GCJ","slug":"GCJ","link":"/tags/GCJ/"}],"categories":[{"name":"生活","slug":"生活","link":"/categories/生活/"},{"name":"工作","slug":"工作","link":"/categories/工作/"},{"name":"小熊猫","slug":"生活/小熊猫","link":"/categories/生活/小熊猫/"},{"name":"ACM","slug":"工作/ACM","link":"/categories/工作/ACM/"},{"name":"iOS","slug":"工作/iOS","link":"/categories/工作/iOS/"},{"name":"招财","slug":"生活/招财","link":"/categories/生活/招财/"},{"name":"小熊猫","slug":"生活/招财/小熊猫","link":"/categories/生活/招财/小熊猫/"},{"name":"小程序","slug":"工作/小程序","link":"/categories/工作/小程序/"},{"name":"招财","slug":"生活/小熊猫/招财","link":"/categories/生活/小熊猫/招财/"}]}